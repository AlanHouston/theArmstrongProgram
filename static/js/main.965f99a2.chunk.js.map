{"version":3,"sources":["Home.js","PullUpHome.js","workouts/maxeffort/MaxEffortSets.js","workouts/maxeffort/MaxEffortInput.js","workouts/maxeffort/MaxEffort.js","workouts/pyramid/PyramidSets.js","workouts/pyramid/PyramidInputs.js","workouts/pyramid/Pyramid.js","workouts/gripswitch/GripSwitchSets.js","workouts/gripswitch/GripSwitchInputs.js","workouts/gripswitch/GripSwitch.js","workouts/maxday/MaxDaySets.js","workouts/maxday/MaxDayInputs.js","workouts/maxday/MaxDay.js","PullUp.js","workouts/pushup/PushUpSets.js","workouts/pushup/PushUpInput.js","workouts/pushup/PushUp.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","react_default","a","createElement","className","id","onClick","changeView","href","target","PullUpHome","changePullUpView","MaxEffortSets","showSets","date","length","map","d","i","key","setOne","setTwo","setThree","setFour","setFive","total","MaxEffortInput","state","whatToShow","content","changeContent","x","_this","setState","getTotal","Number","repsOne","repsTwo","repsThree","repsFour","repsFive","_this2","this","Date","newDate","getMonth","getDate","getFullYear","onSubmit","e","preventDefault","isNaN","newSet","method","headers","Content-Type","body","JSON","stringify","fetch","then","res","json","type","min","onChange","value","Component","MaxEffort","dateArr","setOneArr","setTwoArr","setThreeArr","setFourArr","setFiveArr","totalArr","r","reverse","t","push","_this3","MaxEffortInput_MaxEffortInput","maxeffort_MaxEffortSets","PyramidSets","missed","last","max","PyramidInputs","n","missedSet","lastSet","Pyramid","missedArr","lastArr","maxArr","PyramidInputs_PyramidInputs","GripSwitchSets","overHandSets","overHandReps","inwardSets","inwardReps","wideSets","wideReps","GripSwitchInputs","over","in","inSets","wide","overSets","insets","GripSwitch","overHandRepsArr","inwardRepsArr","wideRepsArr","overHandSetsArr","inwardSetsArr","wideSetsArr","GripSwitchInputs_GripSwitchInputs","gripswitch_GripSwitchSets","MaxDaySets","totalSets","reps","MaxDay","repsArr","totalSetsArr","lastSetArr","MaxDayInputs_MaxDay","PullUp","whatToDisplay","view","whatToRender","maxeffort_MaxEffort","pyramid_Pyramid","gripswitch_GripSwitch","MaxDay_MaxDay","PushUpSets","one","two","three","PushUpInput","PushUp","oneArr","twoArr","threeArr","PushUpInput_PushUpInput","App","src_Home","src_PullUp","PushUp_PushUp","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.965f99a2.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Home(props){\n    return (\n        <div className=\"App\">\n            <button className=\"buttonStyle\" id=\"topButton\" onClick={()=>props.changeView(1)}>Pull Ups!</button>\n            <br/>\n            <button className=\"buttonStyle\" onClick={()=>props.changeView(2)}>Push Ups!</button>\n            <br/>\n            <div id=\"infoStyle\">For more detailed info and instructions, </div>\n            <div>visit the Armstrong Pullup Program home page:</div>\n            <br/>\n            <a className=\"homeButton\" id=\"armHomeStyle\" href=\"http://armstrongpullupprogram.com/\" target=\"_blank\">Armstrong Program</a>\n        </div>\n    );\n}\n\nexport default Home;\n","import React from 'react';\n\nexport default function PullUpHome(props){\n    \n    return (\n    <div className=\"App\">\n        <button className=\"homeButton\" onClick={()=>props.changeView(0)}>Return to Home</button>\n        <br/>\n        <button className=\"buttonStyle\" onClick={()=>props.changePullUpView(1)}>Day 1: Max Effort</button>\n        <br/>\n        <button className=\"buttonStyle\" onClick={()=>props.changePullUpView(2)}>Day 2: Pyramid</button>\n        <br/>\n        <button className=\"buttonStyle\" id=\"gripSwitchBtn\" onClick={()=>props.changePullUpView(3)}>Day 3: Grip Switch</button>\n        <br/>\n        <button className=\"buttonStyle\" onClick={()=>props.changePullUpView(4)}>Day 4: Max Day</button>\n        <br/>\n        <p>On Day 5, repeat the workout you felt was hardest</p>\n        <p>This may change from week to week</p>\n    </div>\n    );\n}","import React from 'react'\n\nfunction MaxEffortSets(props){\n    let showSets;\n    if(props.date.length>0){\n        // map by date, use array position to correlate other data\n        showSets=props.date.map((d,i)=>{\n        return <p key={i}>\n            {d}: &#40;1&#41;: {props.setOne[i]}, \n            &#40;2&#41;: {props.setTwo[i]}, \n            &#40;3&#41;: {props.setThree[i]}, \n            &#40;4&#41;: {props.setFour[i]}, \n            &#40;5&#41;: {props.setFive[i]}, \n            Total: {props.total[i]}\n            </p>\n        }\n        )}\n        else showSets=<p>No Past Data Available</p>\n\n        return(\n            <div>{showSets}</div>\n        )\n}\n\nexport default MaxEffortSets;","import React, { Component } from 'react';\n// import { Container, Row, Col } from 'reactstrap';\n\nexport default class MaxEffortInput extends Component{\n    state={\n        whatToShow:0 //whatToShow: 0 renders inputs, 1 renders results upon completion \n    }\n\n    content={}\n    //content alternates between rendering inputs and session results\n    changeContent=(x)=>{\n        this.setState({whatToShow:x})\n    }\n\n    // formula to calculate total number of pullups per session\n    getTotal=()=>{\n        let total= Number(this.state.repsOne)\n        +Number(this.state.repsTwo)\n        +Number(this.state.repsThree)\n        +Number(this.state.repsFour)\n        +Number(this.state.repsFive);\n        this.setState({total})\n    }\n\n    render(){\n        var date = new Date();\n        var newDate= (date.getMonth() + 1) + '/' + date.getDate() + '/' + date.getFullYear();\n        \n        if(this.state.whatToShow === 0){\n        this.content=\n            <form onSubmit={(e)=>{\n                e.preventDefault();\n                // conditionals to validate inputs, empty string to prevent deleted inputs from validating\n                if(!isNaN(this.state.repsOne) && this.state.repsOne !== '' &&\n                    !isNaN(this.state.repsTwo) && this.state.repsTwo !== '' &&\n                    !isNaN(this.state.repsThree) && this.state.repsThree !== '' &&\n                    !isNaN(this.state.repsFour) && this.state.repsFour !== '' &&\n                    !isNaN(this.state.repsFive) && this.state.repsFive !== ''){\n                        let newSet={\n                            method:\"POST\",\n                            headers: {\"Content-Type\": \"application/json\"},\n                            body: JSON.stringify({\n                                date:newDate,\n                                setOne:this.state.repsOne,\n                                setTwo:this.state.repsTwo,\n                                setThree:this.state.repsThree,\n                                setFour:this.state.repsFour,\n                                setFive:this.state.repsFive,\n                                total:this.state.total\n                            })\n                        }\n                        //post sends current session data to database and sets state to render, \n                        //submit button calculates total, second .then renders results\n                    fetch(\"https://armstrongserver.herokuapp.com/maxeffort\", newSet)\n                    .then((res)=>{return res.json();})\n                    .then(this.changeContent(1));\n                }}}>\n                Set One<input className=\"inputMarg\" type=\"number\" min=\"0\" onChange={(e)=>{\n                    this.setState({repsOne:e.target.value})\n                }}/><br/>\n                Set Two<input className=\"inputMarg\" type=\"number\" min=\"0\" onChange={(e)=>{\n                    this.setState({repsTwo:e.target.value})\n                }}/><br/>\n                Set Three<input className=\"inputMarg\" type=\"number\" min=\"0\" onChange={(e)=>{\n                    this.setState({repsThree:e.target.value})\n                }}/><br/>\n                Set Four<input className=\"inputMarg\" type=\"number\" min=\"0\" onChange={(e)=>{\n                    this.setState({repsFour:e.target.value})\n                }}/><br/>\n                Set Five<input className=\"inputMarg\" type=\"number\" min=\"0\" onChange={(e)=>{\n                    this.setState({repsFive:e.target.value})\n                }}/><br/>\n                <button className=\"homeButton\" type='submit' onClick={()=>{    \n                        this.getTotal();\n                }}>Complete Set\n                </button>\n            </form>\n        }else if(this.state.whatToShow === 1){\n            this.content = \n                <p>This Session: \n                    &#40;1&#41;: {this.state.repsOne}, \n                    &#40;2&#41;: {this.state.repsTwo}, \n                    &#40;3&#41;: {this.state.repsThree}, \n                    &#40;4&#41;: {this.state.repsFour}, \n                    &#40;5&#41;: {this.state.repsFive}, \n                    Total: {this.state.total}\n                </p>\n                \n        }\n            \n        return(\n            <div>{this.content}</div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport MaxEffortSets from './MaxEffortSets';\nimport MaxEffortInput from './MaxEffortInput';\n\nclass MaxEffort extends Component{\n    //state stores data from previous workouts\n    state={\n        date:[],\n        setOne:[],\n        setTwo:[],\n        setThree:[],\n        setFour:[],\n        setFive:[],\n        total:[],\n    }\n\n    componentDidMount(){\n        //fetch call builds these arrays which populates state\n        let dateArr=[];\n        let setOneArr=[];\n        let setTwoArr=[];\n        let setThreeArr=[];\n        let setFourArr=[];\n        let setFiveArr=[];\n        let totalArr=[];\n        fetch(\"https://armstrongserver.herokuapp.com/maxeffort\")\n            .then(r=>r.json())\n            .then(d=>{\n                d.reverse().map(t=>{ //reverse array so data shows most recent data first\n                    dateArr.push(t.date)\n                    setOneArr.push(t.setOne)\n                    setTwoArr.push(t.setTwo)\n                    setThreeArr.push(t.setThree)\n                    setFourArr.push(t.setFour)\n                    setFiveArr.push(t.setFive)\n                    totalArr.push(t.total)\n                })\n                this.setState({\n                    date:dateArr,\n                    setOne:setOneArr,\n                    setTwo:setTwoArr,\n                    setThree:setThreeArr,\n                    setFour:setFourArr,\n                    setFive:setFiveArr,\n                    total:totalArr\n                })\n            })\n    }\n\n    render(){\n        \n        return (\n            <div className=\"App\">\n                <button className=\"homeButton\" onClick={()=>{this.props.changeView(0)}}>Return to Home</button>\n                <h1>DAY 1: MAX EFFORT</h1>\n                <h3>5 max effort sets</h3>\n                <h2>REST : 90 seconds</h2>\n                {/* input component renders the input forms- upon completion, renders session results */}\n                <MaxEffortInput/>\n                {/* sets component renders past workout data */}\n                <MaxEffortSets\n                    date={this.state.date} \n                    setOne={this.state.setOne} \n                    setTwo={this.state.setTwo} \n                    setThree={this.state.setThree} \n                    setFour={this.state.setFour} \n                    setFive={this.state.setFive} \n                    total={this.state.total}\n                />\n            </div>\n        );\n        }\n    }\n    \n    export default MaxEffort;\n","import React from 'react'\n\nexport default function PyramidSets(props){\n    let showSets;\n    if(props.date.length>0){\n        // map by date, use array position to correlate other data\n        showSets=props.date.map((d,i)=>{\n        return <p key={i}>\n            {d}: Trying {props.missed[i]}, \n            Failed on: {props.last[i]}, \n            Max: {props.max[i]}, \n            Total: {props.total[i]}\n            </p>\n    }\n    )}\n    else showSets=<p>No Past Data Available</p>\n\n    return(\n        <div>{showSets}</div>\n    )\n}","import React, { Component } from 'react';\n\nexport default class PyramidInputs extends Component{\n    state={\n        whatToShow:0 //whatToShow: 0 renders inputs, 1 renders results upon completion \n    }\n\n    content={}\n    //content alternates between rendering inputs and session results\n    changeContent=(x)=>{\n        this.setState({whatToShow:x})\n    }\n\n    // formula to calculate total number of pullups per session\n    getTotal=()=>{\n        let n=Number(this.state.missed);\n        let total=((n*(n+1))/2) + Number(this.state.last) + Number(this.state.max)\n        this.setState({total})\n    }\n   \n    render(){\n        var date = new Date();\n        var newDate= (date.getMonth() + 1) + '/' + date.getDate() + '/' + date.getFullYear();\n\n        if(this.state.whatToShow === 0){\n            this.content=\n            <form onSubmit={(e)=>{\n                e.preventDefault();\n                // conditionals to validate inputs, empty string to prevent deleted inputs from validating\n                if(!isNaN(this.state.missed) && this.state.missed !==''&&\n                    !isNaN(this.state.last) && this.state.last !== ''&&\n                    !isNaN(this.state.max) && this.state.max !== ''){\n                    let newSet={\n                        method:\"POST\",\n                        headers: {\"Content-Type\": \"application/json\"},\n                        body: JSON.stringify({\n                            date:newDate,\n                            missedSet:this.state.missed,\n                            lastSet:this.state.last,\n                            max:this.state.max,\n                            total:this.state.total\n                        })\n                    } \n                    //post sends current session data to database and sets state to render, \n                    //submit button calculates total, second .then renders results\n                fetch(\"https://armstrongserver.herokuapp.com/pyramid\", newSet).then((res)=>{\n                    return res.json().then(this.changeContent(1));\n                })\n                }}}>\n                Trying<input type=\"number\" min=\"0\" className=\"inputMarg\" onChange={(e)=>{\n                    this.setState({missed:e.target.value})\n                }}/>\n                <p>Which set were you attempting, but did not complete?</p><br/>\n\n                Last Completed Rep<input type=\"number\" min=\"0\" className=\"inputMarg\" onChange={(e)=>{\n                    this.setState({last:e.target.value})\n                }}/>\n                <p>How many reps did you complete on the failed set?</p><br/>\n\n                Max Set Total Reps<input type=\"number\" min=\"0\" className=\"inputMarg\" onChange={(e)=>{\n                    this.setState({max:e.target.value})\n                }}/><br/>\n\n                <button className=\"homeButton\" type='submit' onClick={()=>{\n                    this.getTotal();\n                }}>Complete Set</button>\n            </form>\n        }\n        else if(this.state.whatToShow === 1){\n            this.content = \n                <p>This Session: \n                    Trying: {this.state.missed}, \n                    Failed on: {this.state.last}, \n                    Max: {this.state.max}, \n                    Total: {this.state.total}\n                    {/* Will need to move the fetch call to the Home button when implementing edit button */}\n                </p>\n        }\n        return(\n            <div>{this.content}</div>\n        )\n    }\n}\n\n","import React, { Component } from 'react';\nimport PyramidSets from './PyramidSets'\nimport PyramidInputs from './PyramidInputs';\n\nclass Pyramid extends Component{\n    //state stores data from previous workouts\n    state={\n        date:[],\n        missed:[],\n        last:[],\n        max:[],\n        total:[]\n    }\n    \n    componentDidMount(){\n        //fetch call builds these arrays which populates state\n        let dateArr=[]\n        let missedArr=[];\n        let lastArr=[];\n        let maxArr=[];\n        let totalArr=[];\n        fetch(\"https://armstrongserver.herokuapp.com/pyramid\")\n            .then(r=>r.json())\n            .then(d=>{\n                d.reverse().map(t=>{ //reverse array so data shows most recent data first\n                    dateArr.push(t.date)\n                    missedArr.push(t.missedSet)\n                    lastArr.push(t.lastSet)\n                    maxArr.push(t.max)\n                    totalArr.push(t.total)\n                })\n                this.setState({\n                    date:dateArr,\n                    missed:missedArr,\n                    last:lastArr,\n                    max:maxArr,\n                    total:totalArr\n                })\n            })\n    }\n\n    render(){\n        \n        return (\n            <div className=\"App\">\n                <button className=\"homeButton\" onClick={()=>{this.props.changeView(0)}}>Return to Home</button>\n                <h1>DAY 2: PYRAMID</h1>\n                <h3>Pyramid of sets of 1, 2, 3, 4, etc. until missed set</h3>\n                <h3>Then one max set</h3>\n                <h2>REST: 10 seconds per pull-up in last set</h2>\n                {/* input component renders the input forms- upon completion, renders session results */}\n                <PyramidInputs />\n                {/* sets component renders past workout data */}\n                <PyramidSets \n                    date={this.state.date} \n                    missed={this.state.missed} \n                    last={this.state.last} \n                    max={this.state.max} \n                    total={this.state.total}\n                />\n            </div>\n            );\n        }\n}\n\nexport default Pyramid;\n","import React from 'react'\n\nfunction GripSwitchSets(props){\n    let showSets;\n    if(props.date.length>0){\n        // map by date, use array position to correlate other data\n        showSets=props.date.map((d,i)=>{\n        return <p key={i}>\n            {d}: Overhand Reps: {props.overHandSets[i]} sets of {props.overHandReps[i]}; \n            Inward Facing Reps:{props.inwardSets[i]} sets of {props.inwardReps[i]};\n            Wide Grip Reps: {props.wideSets[i]} sets of {props.wideReps[i]};\n            Total: {props.total[i]}\n            </p>\n        }\n        )}\n        else showSets=<p>No Past Data Available</p>\n\n        return(\n            <div>{showSets}</div>\n        )\n}\n\nexport default GripSwitchSets;","import React, { Component } from 'react';\n\nexport default class GripSwitchInputs extends Component{\n    state={\n        whatToShow:0 //whatToShow: 0 renders inputs, 1 renders results upon completion \n    }\n\n    content={}\n    //content alternates between rendering inputs and session results\n    changeContent=(x)=>{\n        this.setState({whatToShow:x})\n    }\n\n    // formula to calculate total number of pullups per session\n    getTotal=()=>{\n        let total=Number(this.state.over)*Number(this.state.wideSets)\n        +Number(this.state.in)*Number(this.state.inSets)\n        +Number(this.state.wide)*Number(this.state.wideSets);\n        this.setState({total})\n    }\n\n    render(){\n        var date = new Date();\n        var newDate= (date.getMonth() + 1) + '/' + date.getDate() + '/' + date.getFullYear();\n\n        if(this.state.whatToShow === 0){\n            this.content=\n            <form onSubmit={(e)=>{\n                e.preventDefault();\n                // conditionals to validate inputs, empty string to prevent deleted inputs from validating\n                if(!isNaN(this.state.over) && this.state.over !== '' &&\n                    !isNaN(this.state.in) && this.state.in !== '' &&\n                    !isNaN(this.state.wide) && this.state.wide !== '' &&\n                    !isNaN(this.state.overSets) && this.state.overSets !== '' &&\n                    !isNaN(this.state.inSets) && this.state.insets !== '' &&\n                    !isNaN(this.state.wideSets)) {\n                    let newSet={\n                        method:\"POST\",\n                        headers: {\"Content-Type\": \"application/json\"},\n                        body: JSON.stringify({\n                            date:newDate,\n                            overHandReps:this.state.over,\n                            inwardReps:this.state.in,\n                            wideReps:this.state.wide,\n                            overHandSets:this.state.overSets,\n                            inwardSets:this.state.inSets,\n                            wideSets:this.state.wideSets,\n                            total:this.state.total\n                        })\n                    }\n                    //post sends current session data to database and sets state to render, \n                    //submit button calculates total, second .then renders results\n                fetch(\"https://armstrongserver.herokuapp.com/gripswitch\", newSet).then((res)=>{\n                    return res.json().then(this.changeContent(1));\n                })\n                }}}>\n\n                Reps per Overhand Set<input className=\"inputMarg\" type=\"number\" min=\"0\" onChange={(e)=>{\n                    this.setState({over:e.target.value})\n                }}/>\n                <br/>\n\n                Total Overhand Sets<input className=\"inputMarg\" type=\"number\" min=\"0\" onChange={(e)=>{\n                    this.setState({overSets:e.target.value})\n                }}></input>\n                <br/>\n\n                Reps per Inward Facing Set<input className=\"inputMarg\" type=\"number\" min=\"0\" onChange={(e)=>{\n                    this.setState({in:e.target.value})\n                }}/>\n                <br/>\n\n                Total Inward Facing Sets<input className=\"inputMarg\" type=\"number\" min=\"0\" onChange={(e)=>{\n                    this.setState({inSets:e.target.value})\n                }}></input>\n                <br/>\n\n                Reps per Wide Grip Set<input className=\"inputMarg\" type=\"number\" min=\"0\" onChange={(e)=>{\n                    this.setState({wide:e.target.value})\n                }}/>\n                <br/>\n\n                Total Wide Grip Sets<input className=\"inputMarg\" type=\"number\" min=\"0\" onChange={(e)=>{\n                    this.setState({wideSets:e.target.value})\n                }}></input>\n                <br/>\n                {/* data from these inputs will individually line up differently when rendering: y sets of x */}\n\n                <button className=\"homeButton\" type='submit' onClick={()=>{\n                    this.getTotal();\n                }}>Complete Set</button>\n            </form>\n        }\n        else if(this.state.whatToShow === 1){\n            this.content = \n                <div>\n                    <p>This Session: \n                        Overhand: {this.state.overSets} Sets of {this.state.over};\n                        Inward Facing: {this.state.inSets} Sets of {this.state.in};\n                        Wide Grip: {this.state.wideSets} Sets of {this.state.wide};\n                        Total: {this.state.total}\n                    </p>\n                </div>\n        }\n\n        return(\n            <div>{this.content}</div>\n        )\n    }\n}\n\n\n","import React, { Component } from 'react';\nimport GripSwitchSets from './GripSwitchSets';\nimport GripSwitchInputs from './GripSwitchInputs';\n\nclass GripSwitch extends Component{\n    //state stores data from previous workouts\n    state={\n        date:[],\n        overHandReps: [],\n        inwardReps: [],\n        wideReps: [],\n        overHandSets: [],\n        inwardSets: [],\n        wideSets: [],\n        total:[]\n    }\n    \n    componentDidMount(){\n        //fetch call builds these arrays which populates state\n        let dateArr=[];\n        let overHandRepsArr=[];\n        let inwardRepsArr=[];\n        let wideRepsArr=[];\n        let overHandSetsArr=[];\n        let inwardSetsArr=[];\n        let wideSetsArr=[];\n        let totalArr=[];\n        fetch(\"https://armstrongserver.herokuapp.com/gripswitch\")\n            .then(r=>r.json())\n            .then(d=>{\n                d.reverse().map(t=>{ //reverse array so data shows most recent data first\n                    dateArr.push(t.date)\n                    overHandRepsArr.push(t.overHandReps)\n                    inwardRepsArr.push(t.inwardReps)\n                    wideRepsArr.push(t.wideReps)\n                    overHandSetsArr.push(t.overHandSets)\n                    inwardSetsArr.push(t.inwardSets)\n                    wideSetsArr.push(t.wideSets)\n                    totalArr.push(t.total)\n                })\n                this.setState({\n                    date:dateArr,\n                    overHandReps:overHandRepsArr,\n                    inwardReps:inwardRepsArr,\n                    wideReps:wideRepsArr,\n                    overHandSets:overHandSetsArr,\n                    inwardSets:inwardSetsArr,\n                    wideSets:wideSetsArr,\n                    total:totalArr\n                })\n            })\n    }\n\n    render(){\n        return (\n            <div className=\"App\">\n                <button className=\"homeButton\" onClick={()=>{this.props.changeView(0)}}>Return to Home</button>\n                <h1>DAY 3: GRIP SWITCH</h1>\n                <h3>3 sets overhand</h3>\n                <h3>3 sets palms inward, pinkies together</h3>\n                <h3>3 sets wide grip</h3>\n                <h2>REST: 60 seconds</h2>\n                {/* input component renders the input forms- upon completion, renders session results */}\n                <GripSwitchInputs />\n                {/* sets component renders past workout data */}\n                <GripSwitchSets \n                    date={this.state.date}\n                    overHandReps={this.state.overHandReps}\n                    inwardReps={this.state.inwardReps}\n                    wideReps={this.state.wideReps}\n                    overHandSets={this.state.overHandSets}\n                    inwardSets={this.state.inwardSets}\n                    wideSets={this.state.wideSets}\n                    total={this.state.total}\n                />\n            </div>\n    );\n    }\n}\n\nexport default GripSwitch;","import React from 'react'\n\nexport default function MaxDaySets(props){\n    let showSets;\n    if(props.date.length>0){\n        // map by date, use array position to correlate other data\n        showSets=props.date.map((d,i)=>{    \n        return <p key={i}>\n            {d}: {props.totalSets[i]} Full sets of {props.reps[i]}, \n            Remainder {props.lastSet[i]},\n            Total {props.total[i]}\n            </p>\n    }\n    )}\n    else showSets=<p>No Past Data Available</p>\n\n    return(\n        <div>{showSets}</div>\n    )\n}","import React, { Component } from 'react';\n\nexport default class MaxDay extends Component{\n    state={\n        whatToShow:0 //whatToShow: 0 renders inputs, 1 renders results upon completion \n    }\n\n    content={}\n    //content alternates between rendering inputs and session results\n    changeContent=(x)=>{\n        this.setState({whatToShow:x})\n    }\n\n    // formula to calculate total number of pullups per session\n    getTotal=()=>{\n        let total=Number(this.state.reps) * Number(this.state.totalSets) + Number(this.state.lastSet);\n        this.setState({total});\n    }\n\n    render(){\n        var date = new Date();\n        var newDate= (date.getMonth() + 1) + '/' + date.getDate() + '/' + date.getFullYear();\n\n        if(this.state.whatToShow === 0){\n            this.content=\n            <form onSubmit={(e)=>{\n                e.preventDefault();\n                // conditionals to validate inputs, empty string to prevent deleted inputs from validating\n                if(!isNaN(this.state.reps) && this.state.reps !== '' &&\n                    !isNaN(this.state.totalSets) && this.state.totalSets !== '' &&\n                    !isNaN(this.state.lastSet) && this.state.lastSet !== ''){\n                    let newSet={\n                        method:\"POST\",\n                        headers: {\"Content-Type\": \"application/json\"},\n                        body: JSON.stringify({\n                            date:newDate,\n                            reps:this.state.reps,\n                            totalSets:this.state.totalSets,\n                            lastSet:this.state.lastSet,\n                            total:this.state.total\n                        })\n                    }\n                    //post sends current session data to database and sets state to render, \n                    //submit button calculates total, second .then renders results\n                fetch(\"https://armstrongserver.herokuapp.com/maxday\", newSet).then((res)=>{\n                    return res.json().then(this.changeContent(1));\n                })\n                }}}>\n                Reps per Set<input className=\"inputMarg\" type=\"number\" min=\"0\" onChange={(e)=>{\n                    this.setState({reps:e.target.value})\n                }}/>\n                <br/>\n\n                Total Number of Complete Sets<input className=\"inputMarg\" type=\"number\" min=\"0\" onChange={(e)=>{\n                    this.setState({totalSets:e.target.value})\n                }}/>\n                <br/>\n\n                If your final set was incomplete, how many reps did you complete?<input className=\"inputMarg\" type=\"number\" min=\"0\" onChange={(e)=>{\n                    this.setState({lastSet:e.target.value})\n                }}/><br/>\n\n                <button className=\"homeButton\" type='submit' onClick={()=>{\n                    this.getTotal();\n                }}>Complete Set</button>\n            </form>\n        }\n        else if(this.state.whatToShow === 1){\n            this.content = \n                <div>\n                    <p>This Session: {this.state.totalSets} Full Sets of {this.state.reps},\n                        Remainder: {this.state.lastSet}, \n                        Total: {this.state.total}\n                    </p>\n                    {/* Will need to move the fetch call to the Home button when implementing edit button */}\n                </div>\n        }\n        return(\n            <div>{this.content}</div>\n        )\n    }\n\n\n\n\n\n\n}","import React, { Component } from 'react';\nimport MaxDaySets from './MaxDaySets';\nimport MaxDayInputs from './MaxDayInputs';\n\nexport default class MaxDay extends Component{\n    //state stores data from previous workouts\n    state={\n        date:[],\n        reps:[],\n        totalSets:[],\n        lastSet:[],\n        total:[]\n    }\n\n    componentDidMount(){\n        //fetch call builds these arrays which populates state\n        let dateArr=[];\n        let repsArr=[];\n        let totalSetsArr=[];\n        let lastSetArr=[];\n        let totalArr=[];\n        fetch(\"https://armstrongserver.herokuapp.com/maxday\")\n            .then(r=>r.json())\n            .then(d=>{\n                d.reverse().map(t=>{ //reverse array so data shows most recent data first\n                    dateArr.push(t.date)\n                    repsArr.push(t.reps)\n                    totalSetsArr.push(t.totalSets)\n                    lastSetArr.push(t.lastSet)\n                    totalArr.push(t.total)\n                })\n                this.setState({\n                    date:dateArr,\n                    reps:repsArr,\n                    totalSets:totalSetsArr,\n                    lastSet:lastSetArr,\n                    total:totalArr\n                })\n            })\n    }\n\n    render(){\n        return (\n        <div className=\"App\">\n            <button className=\"homeButton\" onClick={()=>{this.props.changeView(0)}}>Return to Home</button>\n            <h1>DAY 4: MAX DAY</h1>\n            <h3>Max number of training sets</h3>\n            <h2>REST: 60 seconds</h2>\n            {/* input component renders the input forms- upon completion, renders session results */}\n            <MaxDayInputs/>\n            {/* sets component renders past workout data */}\n            <MaxDaySets\n                date={this.state.date}\n                reps={this.state.reps}\n                totalSets={this.state.totalSets}\n                lastSet={this.state.lastSet}\n                total={this.state.total}\n            />\n        </div>\n        );\n    }\n}\n\n","import React, { Component } from 'react';\nimport PullUpHome from './PullUpHome';\nimport MaxEffort from './workouts/maxeffort/MaxEffort'\nimport Pyramid from './workouts/pyramid/Pyramid'\nimport GripSwitch from './workouts/gripswitch/GripSwitch'\nimport MaxDay from './workouts/maxday/MaxDay'\n\nclass PullUp extends Component{\n    state={\n        whatToDisplay: 0,\n    }\n    \n    changePullUpView = (view)=>{\n        this.setState({whatToDisplay:view})\n    }\n\n    render(){\n        let whatToRender = null;\n        if(this.state.whatToDisplay ===0){\n            whatToRender = <PullUpHome changeView={this.props.changeView} changePullUpView={this.changePullUpView}/>\n        }\n        if(this.state.whatToDisplay ===1){\n            whatToRender = <MaxEffort changeView={this.props.changeView}/>\n        }\n        if(this.state.whatToDisplay ===2){\n            whatToRender = <Pyramid changeView={this.props.changeView}/>\n        }\n        if(this.state.whatToDisplay ===3){\n            whatToRender = <GripSwitch changeView={this.props.changeView}/>\n        }\n        if(this.state.whatToDisplay ===4){\n            whatToRender = <MaxDay changeView={this.props.changeView}/>\n        }\n\n        return (\n            <div className=\"App\">\n                {whatToRender}\n            </div>\n        );\n    }\n}\n\nexport default PullUp;","import React from 'react'\n\nexport default function PushUpSets(props){\n    let showSets;\n    if(props.date.length>0){\n        // map by date, use array position to correlate other data\n        showSets=props.date.map((d,i)=>{\n        return <p key={i}>\n            {d}: &#40;1&#41;: {props.one[i]}, \n            &#40;2&#41;: {props.two[i]}, \n            &#40;3&#41;: {props.three[i]}, \n            Total: {props.total[i]}\n            </p>\n        }\n        )}\n        else showSets=<p>No Past Data Available</p>\n\n        return(\n            <div>{showSets}</div>\n        )\n}\n\n","import React, { Component } from 'react';\n\nexport default class PushUpInput extends Component{\n    state={\n        whatToShow:0 //whatToShow: 0 renders inputs, 1 renders results upon completion \n    }\n\n    content={}\n    //content alternates between rendering inputs and session results\n    changeContent=(x)=>{\n        this.setState({whatToShow:x})\n    }\n\n    // formula to calculate total number of pullups per session\n    getTotal=()=>{\n        let total= Number(this.state.one)\n        +Number(this.state.two)\n        +Number(this.state.three);\n        this.setState({total})\n    }\n\n    render(){\n        var date = new Date();\n        var newDate= (date.getMonth() + 1) + '/' + date.getDate() + '/' + date.getFullYear();\n        \n        if(this.state.whatToShow === 0){\n        this.content=\n            <form onSubmit={(e)=>{\n                e.preventDefault();\n                // conditionals to validate inputs, empty string to prevent deleted inputs from validating\n                if(!isNaN(this.state.one) && this.state.one !== '' &&\n                    !isNaN(this.state.two)&& this.state.two !== '' &&\n                    !isNaN(this.state.three)&& this.state.three !== ''){\n                    let newSet={\n                        method:\"POST\",\n                        headers: {\"Content-Type\": \"application/json\"},\n                        body: JSON.stringify({\n                            date:newDate,\n                            one:this.state.one,\n                            two:this.state.two,\n                            three:this.state.three,\n                            total:this.state.total\n                        })\n                    }\n                    //post sends current session data to database and sets state to render, \n                    //submit button calculates total, second .then renders results\n                fetch(\"https://armstrongserver.herokuapp.com/pushup\", newSet).then((res)=>{\n                    return res.json();\n                }).then(this.changeContent(1))\n                }}}>\n                Set One<input className=\"inputMarg\" type=\"number\" min=\"0\" onChange={(e)=>{\n                    this.setState({one:e.target.value})\n                }}/><br/>\n                Set Two<input className=\"inputMarg\" type=\"number\" min=\"0\" onChange={(e)=>{\n                    this.setState({two:e.target.value})\n                }}/><br/>\n                Set Three<input className=\"inputMarg\" type=\"number\" min=\"0\" onChange={(e)=>{\n                    this.setState({three:e.target.value})\n                }}/><br/>\n                <button className=\"homeButton\" type='submit' onClick={()=>{    \n                    this.getTotal();\n                }}>Complete Set</button>\n            </form>\n        }else if(this.state.whatToShow === 1){\n            this.content = \n                <p>This Session: \n                    One: {this.state.one}, \n                    Two: {this.state.two}, \n                    Three: {this.state.three}, \n                    Total: {this.state.total}\n                </p>\n                \n        }\n            \n        return(\n            <div>{this.content}</div>\n        )\n    }\n}\n\n","import React, { Component } from 'react';\nimport PushUpSets from './PushUpSets';\nimport PushUpInput from './PushUpInput';\n\n\nexport default class PushUp extends Component{\n    state={\n        date:[],\n        one:[],\n        two:[],\n        three:[],\n        total:[],\n    }\n\n    componentDidMount(){\n        let dateArr=[];\n        let oneArr=[];\n        let twoArr=[];\n        let threeArr=[];\n        let totalArr=[];\n        fetch(\"https://armstrongserver.herokuapp.com/pushup\")\n            .then(r=>r.json())\n            .then(d=>{\n                d.reverse().map(t=>{\n                    dateArr.push(t.date)\n                    oneArr.push(t.one)\n                    twoArr.push(t.two)\n                    threeArr.push(t.three)\n                    totalArr.push(t.total)\n                })\n                this.setState({\n                    date:dateArr,\n                    one:oneArr,\n                    two:twoArr,\n                    three:threeArr,\n                    total:totalArr\n                })\n            })\n    }\n\n    render(){\n        return(\n            <div className=\"App\">\n                <button className=\"homeButton\" onClick={()=>{this.props.changeView(0)}}>Return to Home</button>\n                <h1>EVERY DAY!</h1>\n                <h3>3 max effort sets</h3>\n                <h3>Push Ups should be done when you start your day</h3>\n                <h3>Each set should be separated by at least 10 minutes</h3>\n                <PushUpInput/>\n                <PushUpSets\n                    date={this.state.date} \n                    one={this.state.one} \n                    two={this.state.two} \n                    three={this.state.three} \n                    total={this.state.total}\n                />\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Home from './Home'\nimport PullUp from './PullUp'\nimport PushUp from './workouts/pushup/PushUp'\n// import Stats from './stats/index'\n\n\nclass App extends Component {\n  state={\n    whatToDisplay: 0,\n  }\n// controls view between home >> pushup vs pullup\n  changeView = (view)=>{\n    this.setState({whatToDisplay:view})\n  }\n\n  render() {\n    let whatToRender = null;\n    if(this.state.whatToDisplay === 0){\n      whatToRender = <Home changeView={this.changeView}/>\n    }\n    else if(this.state.whatToDisplay === 1){\n      whatToRender = <PullUp changeView={this.changeView}/>\n    }\n    else if(this.state.whatToDisplay === 2){\n      whatToRender = <PushUp changeView={this.changeView}/>\n    }\n    // else if(this.state.whatToDisplay === 3){\n    //   whatToRender = <Stats changeView={this.changeView}/>\n    // }\n    return (\n      <div className=\"App\">\n        {whatToRender}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}