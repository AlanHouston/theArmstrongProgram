{"version":3,"sources":["Home.js","PullUpHome.js","workouts/maxeffort/MaxEffortSets.js","workouts/maxeffort/MaxEffortInput.js","workouts/maxeffort/MaxEffort.js","workouts/pyramid/PyramidSets.js","workouts/pyramid/PyramidInputs.js","workouts/pyramid/Pyramid.js","workouts/gripswitch/GripSwitchSets.js","workouts/gripswitch/GripSwitchInputs.js","workouts/gripswitch/GripSwitch.js","workouts/maxday/MaxDaySets.js","workouts/maxday/MaxDayInputs.js","workouts/maxday/MaxDay.js","PullUp.js","workouts/pushup/PushUpSets.js","workouts/pushup/PushUpInput.js","workouts/pushup/PushUp.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","react_default","a","createElement","className","id","onClick","changeView","href","target","PullUpHome","_this","this","changePullUpView","MaxEffortSets","showSets","date","length","map","d","i","key","setOne","setTwo","setThree","setFour","setFive","total","MaxEffortInput","state","whatToShow","content","changeContent","x","setState","getTotal","Number","repsOne","repsTwo","repsThree","repsFour","repsFive","_this2","Date","newDate","getMonth","getDate","getFullYear","onSubmit","e","preventDefault","isNaN","newSet","method","headers","Content-Type","body","JSON","stringify","fetch","then","res","json","type","min","onChange","value","Component","MaxEffort","dateArr","setOneArr","setTwoArr","setThreeArr","setFourArr","setFiveArr","totalArr","r","reverse","t","push","_this3","MaxEffortInput_MaxEffortInput","maxeffort_MaxEffortSets","PyramidSets","missed","last","max","PyramidInputs","n","missedSet","lastSet","Pyramid","missedArr","lastArr","maxArr","PyramidInputs_PyramidInputs","GripSwitchSets","overHandSets","overHandReps","inwardSets","inwardReps","wideSets","wideReps","GripSwitchInputs","over","in","inSets","wide","overSets","insets","GripSwitch","overHandRepsArr","inwardRepsArr","wideRepsArr","overHandSetsArr","inwardSetsArr","wideSetsArr","GripSwitchInputs_GripSwitchInputs","gripswitch_GripSwitchSets","MaxDaySets","totalSets","reps","MaxDay","repsArr","totalSetsArr","lastSetArr","MaxDayInputs_MaxDay","PullUp","whatToDisplay","view","whatToRender","maxeffort_MaxEffort","pyramid_Pyramid","gripswitch_GripSwitch","MaxDay_MaxDay","PushUpSets","one","two","three","PushUpInput","PushUp","oneArr","twoArr","threeArr","PushUpInput_PushUpInput","App","src_Home","src_PullUp","PushUp_PushUp","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+NAmBeA,MAjBf,SAAcC,GACV,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAcC,GAAG,YAAYC,QAAS,kBAAIN,EAAMO,WAAW,KAA7E,aACAN,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAcE,QAAS,kBAAIN,EAAMO,WAAW,KAA9D,aACAN,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKE,GAAG,aAAR,6CACAJ,EAAAC,EAAAC,cAAA,4DACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAaC,GAAG,eAAeG,KAAK,qCAAqCC,OAAO,UAA7F,uBCVG,SAASC,EAAWV,GAAM,IAAAW,EAAAC,KAErC,OACIX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAaE,QAAS,WAAKK,EAAKX,MAAMO,WAAW,KAAnE,kBACAN,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAcE,QAAS,kBAAIN,EAAMa,iBAAiB,KAApE,sBACAZ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAcE,QAAS,kBAAIN,EAAMa,iBAAiB,KAApE,mBACAZ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAcE,QAAS,kBAAIN,EAAMa,iBAAiB,KAApE,uBACAZ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAcE,QAAS,kBAAIN,EAAMa,iBAAiB,KAApE,mBACAZ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,8DACAF,EAAAC,EAAAC,cAAA,+CCOOW,MAtBf,SAAuBd,GACnB,IAAIe,EAgBA,OAbAA,EAFDf,EAAMgB,KAAKC,OAAO,EAERjB,EAAMgB,KAAKE,IAAI,SAACC,EAAEC,GAC3B,OAAOnB,EAAAC,EAAAC,cAAA,KAAGkB,IAAKD,GACVD,EADE,UACgBnB,EAAMsB,OAAOF,GAD7B,UAEWpB,EAAMuB,OAAOH,GAFxB,UAGWpB,EAAMwB,SAASJ,GAH1B,UAIWpB,EAAMyB,QAAQL,GAJzB,UAKWpB,EAAM0B,QAAQN,GALzB,YAMKpB,EAAM2B,MAAMP,MAIVnB,EAAAC,EAAAC,cAAA,mCAGVF,EAAAC,EAAAC,cAAA,WAAMY,ICjBGa,6MACjBC,MAAM,CACFC,WAAW,KAGfC,QAAQ,KAERC,cAAc,SAACC,GACXtB,EAAKuB,SAAS,CAACJ,WAAWG,OAI9BE,SAAS,WACL,IAAIR,EAAOS,OAAOzB,EAAKkB,MAAMQ,SAC5BD,OAAOzB,EAAKkB,MAAMS,SAClBF,OAAOzB,EAAKkB,MAAMU,WAClBH,OAAOzB,EAAKkB,MAAMW,UAClBJ,OAAOzB,EAAKkB,MAAMY,UACnB9B,EAAKuB,SAAS,CAACP,mFAGX,IAAAe,EAAA9B,KACAI,EAAO,IAAI2B,KACXC,EAAU5B,EAAK6B,WAAa,EAAK,IAAM7B,EAAK8B,UAAY,IAAM9B,EAAK+B,cAgEvE,OA9D6B,IAA1BnC,KAAKiB,MAAMC,WACdlB,KAAKmB,QACD9B,EAAAC,EAAAC,cAAA,QAAM6C,SAAU,SAACC,GAGb,GAFAA,EAAEC,kBAEEC,MAAMT,EAAKb,MAAMQ,UAAmC,KAAvBK,EAAKb,MAAMQ,UACvCc,MAAMT,EAAKb,MAAMS,UAAmC,KAAvBI,EAAKb,MAAMS,UACxCa,MAAMT,EAAKb,MAAMU,YAAuC,KAAzBG,EAAKb,MAAMU,YAC1CY,MAAMT,EAAKb,MAAMW,WAAqC,KAAxBE,EAAKb,MAAMW,WACzCW,MAAMT,EAAKb,MAAMY,WAAqC,KAAxBC,EAAKb,MAAMY,SAAgB,CACtD,IAAIW,EAAO,CACPC,OAAO,OACPC,QAAS,CAACC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACjB1C,KAAK4B,EACLtB,OAAOoB,EAAKb,MAAMQ,QAClBd,OAAOmB,EAAKb,MAAMS,QAClBd,SAASkB,EAAKb,MAAMU,UACpBd,QAAQiB,EAAKb,MAAMW,SACnBd,QAAQgB,EAAKb,MAAMY,SACnBd,MAAMe,EAAKb,MAAMF,SAK7BgC,MAAM,kDAAmDP,GACxDQ,KAAK,SAACC,GAAO,OAAOA,EAAIC,SACxBF,KAAKlB,EAAKV,cAAc,OAzBjC,UA2BW/B,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YAAY2D,KAAK,SAASC,IAAI,IAAIC,SAAU,SAAChB,GACjEP,EAAKR,SAAS,CAACG,QAAQY,EAAExC,OAAOyD,WAChCjE,EAAAC,EAAAC,cAAA,WA7BR,UA8BWF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YAAY2D,KAAK,SAASC,IAAI,IAAIC,SAAU,SAAChB,GACjEP,EAAKR,SAAS,CAACI,QAAQW,EAAExC,OAAOyD,WAChCjE,EAAAC,EAAAC,cAAA,WAhCR,YAiCaF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YAAY2D,KAAK,SAASC,IAAI,IAAIC,SAAU,SAAChB,GACnEP,EAAKR,SAAS,CAACK,UAAUU,EAAExC,OAAOyD,WAClCjE,EAAAC,EAAAC,cAAA,WAnCR,WAoCYF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YAAY2D,KAAK,SAASC,IAAI,IAAIC,SAAU,SAAChB,GAClEP,EAAKR,SAAS,CAACM,SAASS,EAAExC,OAAOyD,WACjCjE,EAAAC,EAAAC,cAAA,WAtCR,WAuCYF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YAAY2D,KAAK,SAASC,IAAI,IAAIC,SAAU,SAAChB,GAClEP,EAAKR,SAAS,CAACO,SAASQ,EAAExC,OAAOyD,WACjCjE,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAa2D,KAAK,SAASzD,QAAS,WAC9CoC,EAAKP,aADb,iBAK2B,IAA1BvB,KAAKiB,MAAMC,aAChBlB,KAAKmB,QACD9B,EAAAC,EAAAC,cAAA,+BACkBS,KAAKiB,MAAMQ,QAD7B,UAEkBzB,KAAKiB,MAAMS,QAF7B,UAGkB1B,KAAKiB,MAAMU,UAH7B,UAIkB3B,KAAKiB,MAAMW,SAJ7B,UAKkB5B,KAAKiB,MAAMY,SAL7B,YAMY7B,KAAKiB,MAAMF,QAM3B1B,EAAAC,EAAAC,cAAA,WAAMS,KAAKmB,gBAxFqBoC,aCuEzBC,6MApEfvC,MAAM,CACFb,KAAK,GACLM,OAAO,GACPC,OAAO,GACPC,SAAS,GACTC,QAAQ,GACRC,QAAQ,GACRC,MAAM,uFAGS,IAAAe,EAAA9B,KAEXyD,EAAQ,GACRC,EAAU,GACVC,EAAU,GACVC,EAAY,GACZC,EAAW,GACXC,EAAW,GACXC,EAAS,GACbhB,MAAM,mDACDC,KAAK,SAAAgB,GAAC,OAAEA,EAAEd,SACVF,KAAK,SAAAzC,GACFA,EAAE0D,UAAU3D,IAAI,SAAA4D,GACZT,EAAQU,KAAKD,EAAE9D,MACfsD,EAAUS,KAAKD,EAAExD,QACjBiD,EAAUQ,KAAKD,EAAEvD,QACjBiD,EAAYO,KAAKD,EAAEtD,UACnBiD,EAAWM,KAAKD,EAAErD,SAClBiD,EAAWK,KAAKD,EAAEpD,SAClBiD,EAASI,KAAKD,EAAEnD,SAEpBe,EAAKR,SAAS,CACVlB,KAAKqD,EACL/C,OAAOgD,EACP/C,OAAOgD,EACP/C,SAASgD,EACT/C,QAAQgD,EACR/C,QAAQgD,EACR/C,MAAMgD,uCAKd,IAAAK,EAAApE,KAEJ,OACIX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAaE,QAAS,WAAK0E,EAAKhF,MAAMO,WAAW,KAAnE,kBACAN,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,+BAEAF,EAAAC,EAAAC,cAAC8E,EAAD,MAEAhF,EAAAC,EAAAC,cAAC+E,EAAD,CACIlE,KAAMJ,KAAKiB,MAAMb,KACjBM,OAAQV,KAAKiB,MAAMP,OACnBC,OAAQX,KAAKiB,MAAMN,OACnBC,SAAUZ,KAAKiB,MAAML,SACrBC,QAASb,KAAKiB,MAAMJ,QACpBC,QAASd,KAAKiB,MAAMH,QACpBC,MAAOf,KAAKiB,MAAMF,gBA/DdwC,aCFT,SAASgB,EAAYnF,GAChC,IAAIe,EAcJ,OAXIA,EAFDf,EAAMgB,KAAKC,OAAO,EAERjB,EAAMgB,KAAKE,IAAI,SAACC,EAAEC,GAC3B,OAAOnB,EAAAC,EAAAC,cAAA,KAAGkB,IAAKD,GACVD,EADE,YACUnB,EAAMoF,OAAOhE,GADvB,gBAESpB,EAAMqF,KAAKjE,GAFpB,UAGGpB,EAAMsF,IAAIlE,GAHb,YAIKpB,EAAM2B,MAAMP,MAIdnB,EAAAC,EAAAC,cAAA,mCAGVF,EAAAC,EAAAC,cAAA,WAAMY,OChBOwE,6MACjB1D,MAAM,CACFC,WAAW,KAGfC,QAAQ,KAERC,cAAc,SAACC,GACXtB,EAAKuB,SAAS,CAACJ,WAAWG,OAI9BE,SAAS,WACL,IAAIqD,EAAEpD,OAAOzB,EAAKkB,MAAMuD,QACpBzD,EAAQ6D,GAAGA,EAAE,GAAI,EAAKpD,OAAOzB,EAAKkB,MAAMwD,MAAQjD,OAAOzB,EAAKkB,MAAMyD,KACtE3E,EAAKuB,SAAS,CAACP,mFAGX,IAAAe,EAAA9B,KACAI,EAAO,IAAI2B,KACXC,EAAU5B,EAAK6B,WAAa,EAAK,IAAM7B,EAAK8B,UAAY,IAAM9B,EAAK+B,cAwDvE,OAtD6B,IAA1BnC,KAAKiB,MAAMC,WACVlB,KAAKmB,QACL9B,EAAAC,EAAAC,cAAA,QAAM6C,SAAU,SAACC,GAGb,GAFAA,EAAEC,kBAEEC,MAAMT,EAAKb,MAAMuD,SAAgC,KAArB1C,EAAKb,MAAMuD,SACtCjC,MAAMT,EAAKb,MAAMwD,OAA6B,KAApB3C,EAAKb,MAAMwD,OACrClC,MAAMT,EAAKb,MAAMyD,MAA2B,KAAnB5C,EAAKb,MAAMyD,IAAW,CAChD,IAAIlC,EAAO,CACPC,OAAO,OACPC,QAAS,CAACC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACjB1C,KAAK4B,EACL6C,UAAU/C,EAAKb,MAAMuD,OACrBM,QAAQhD,EAAKb,MAAMwD,KACnBC,IAAI5C,EAAKb,MAAMyD,IACf3D,MAAMe,EAAKb,MAAMF,SAK7BgC,MAAM,gDAAiDP,GAAQQ,KAAK,SAACC,GACjE,OAAOA,EAAIC,OAAOF,KAAKlB,EAAKV,cAAc,SApBlD,SAuBU/B,EAAAC,EAAAC,cAAA,SAAO4D,KAAK,SAASC,IAAI,IAAI5D,UAAU,YAAY6D,SAAU,SAAChB,GAChEP,EAAKR,SAAS,CAACkD,OAAOnC,EAAExC,OAAOyD,WAEnCjE,EAAAC,EAAAC,cAAA,iEAA2DF,EAAAC,EAAAC,cAAA,WA1B/D,qBA4BsBF,EAAAC,EAAAC,cAAA,SAAO4D,KAAK,SAASC,IAAI,IAAI5D,UAAU,YAAY6D,SAAU,SAAChB,GAC5EP,EAAKR,SAAS,CAACmD,KAAKpC,EAAExC,OAAOyD,WAEjCjE,EAAAC,EAAAC,cAAA,8DAAwDF,EAAAC,EAAAC,cAAA,WA/B5D,qBAiCsBF,EAAAC,EAAAC,cAAA,SAAO4D,KAAK,SAASC,IAAI,IAAI5D,UAAU,YAAY6D,SAAU,SAAChB,GAC5EP,EAAKR,SAAS,CAACoD,IAAIrC,EAAExC,OAAOyD,WAC5BjE,EAAAC,EAAAC,cAAA,WAEJF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAa2D,KAAK,SAASzD,QAAS,WAClDoC,EAAKP,aADT,iBAK0B,IAA1BvB,KAAKiB,MAAMC,aACflB,KAAKmB,QACD9B,EAAAC,EAAAC,cAAA,kCACaS,KAAKiB,MAAMuD,OADxB,gBAEgBxE,KAAKiB,MAAMwD,KAF3B,UAGUzE,KAAKiB,MAAMyD,IAHrB,YAIY1E,KAAKiB,MAAMF,QAK3B1B,EAAAC,EAAAC,cAAA,WAAMS,KAAKmB,gBA7EoBoC,aC+D5BwB,6MA3DX9D,MAAM,CACFb,KAAK,GACLoE,OAAO,GACPC,KAAK,GACLC,IAAI,GACJ3D,MAAM,uFAGS,IAAAe,EAAA9B,KAEXyD,EAAQ,GACRuB,EAAU,GACVC,EAAQ,GACRC,EAAO,GACPnB,EAAS,GACbhB,MAAM,iDACDC,KAAK,SAAAgB,GAAC,OAAEA,EAAEd,SACVF,KAAK,SAAAzC,GACFA,EAAE0D,UAAU3D,IAAI,SAAA4D,GACZT,EAAQU,KAAKD,EAAE9D,MACf4E,EAAUb,KAAKD,EAAEW,WACjBI,EAAQd,KAAKD,EAAEY,SACfI,EAAOf,KAAKD,EAAEQ,KACdX,EAASI,KAAKD,EAAEnD,SAEpBe,EAAKR,SAAS,CACVlB,KAAKqD,EACLe,OAAOQ,EACPP,KAAKQ,EACLP,IAAIQ,EACJnE,MAAMgD,uCAKd,IAAAK,EAAApE,KAEJ,OACIX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAaE,QAAS,WAAK0E,EAAKhF,MAAMO,WAAW,KAAnE,kBACAN,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,kEACAF,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,sDAEAF,EAAAC,EAAAC,cAAC4F,EAAD,MAEA9F,EAAAC,EAAAC,cAACgF,EAAD,CACInE,KAAMJ,KAAKiB,MAAMb,KACjBoE,OAAQxE,KAAKiB,MAAMuD,OACnBC,KAAMzE,KAAKiB,MAAMwD,KACjBC,IAAK1E,KAAKiB,MAAMyD,IAChB3D,MAAOf,KAAKiB,MAAMF,gBAtDhBwC,aCkBP6B,MApBf,SAAwBhG,GACpB,IAAIe,EAcA,OAXAA,EAFDf,EAAMgB,KAAKC,OAAO,EAERjB,EAAMgB,KAAKE,IAAI,SAACC,EAAEC,GAC3B,OAAOnB,EAAAC,EAAAC,cAAA,KAAGkB,IAAKD,GACVD,EADE,oBACkBnB,EAAMiG,aAAa7E,GADrC,YACkDpB,EAAMkG,aAAa9E,GADrE,wBAEiBpB,EAAMmG,WAAW/E,GAFlC,YAE+CpB,EAAMoG,WAAWhF,GAFhE,qBAGcpB,EAAMqG,SAASjF,GAH7B,YAG0CpB,EAAMsG,SAASlF,GAHzD,YAIKpB,EAAM2B,MAAMP,MAIVnB,EAAAC,EAAAC,cAAA,mCAGVF,EAAAC,EAAAC,cAAA,WAAMY,IChBGwF,6MACjB1E,MAAM,CACFC,WAAW,KAGfC,QAAQ,KAERC,cAAc,SAACC,GACXtB,EAAKuB,SAAS,CAACJ,WAAWG,OAI9BE,SAAS,WACL,IAAIR,EAAMS,OAAOzB,EAAKkB,MAAM2E,MAAMpE,OAAOzB,EAAKkB,MAAMwE,UACnDjE,OAAOzB,EAAKkB,MAAM4E,IAAIrE,OAAOzB,EAAKkB,MAAM6E,QACxCtE,OAAOzB,EAAKkB,MAAM8E,MAAMvE,OAAOzB,EAAKkB,MAAMwE,UAC3C1F,EAAKuB,SAAS,CAACP,mFAGX,IAAAe,EAAA9B,KACAI,EAAO,IAAI2B,KACXC,EAAU5B,EAAK6B,WAAa,EAAK,IAAM7B,EAAK8B,UAAY,IAAM9B,EAAK+B,cAkFvE,OAhF6B,IAA1BnC,KAAKiB,MAAMC,WACVlB,KAAKmB,QACL9B,EAAAC,EAAAC,cAAA,QAAM6C,SAAU,SAACC,GAGb,GAFAA,EAAEC,kBAEEC,MAAMT,EAAKb,MAAM2E,OAA6B,KAApB9D,EAAKb,MAAM2E,OACpCrD,MAAMT,EAAKb,MAAM4E,KAAyB,KAAlB/D,EAAKb,MAAM4E,KACnCtD,MAAMT,EAAKb,MAAM8E,OAA6B,KAApBjE,EAAKb,MAAM8E,OACrCxD,MAAMT,EAAKb,MAAM+E,WAAqC,KAAxBlE,EAAKb,MAAM+E,WACzCzD,MAAMT,EAAKb,MAAM6E,SAAiC,KAAtBhE,EAAKb,MAAMgF,SACvC1D,MAAMT,EAAKb,MAAMwE,UAAW,CAC7B,IAAIjD,EAAO,CACPC,OAAO,OACPC,QAAS,CAACC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACjB1C,KAAK4B,EACLsD,aAAaxD,EAAKb,MAAM2E,KACxBJ,WAAW1D,EAAKb,MAAM4E,GACtBH,SAAS5D,EAAKb,MAAM8E,KACpBV,aAAavD,EAAKb,MAAM+E,SACxBT,WAAWzD,EAAKb,MAAM6E,OACtBL,SAAS3D,EAAKb,MAAMwE,SACpB1E,MAAMe,EAAKb,MAAMF,SAK7BgC,MAAM,mDAAoDP,GAAQQ,KAAK,SAACC,GACpE,OAAOA,EAAIC,OAAOF,KAAKlB,EAAKV,cAAc,SA1BlD,wBA8ByB/B,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YAAY2D,KAAK,SAASC,IAAI,IAAIC,SAAU,SAAChB,GAC/EP,EAAKR,SAAS,CAACsE,KAAKvD,EAAExC,OAAOyD,WAEjCjE,EAAAC,EAAAC,cAAA,WAjCJ,sBAmCuBF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YAAY2D,KAAK,SAASC,IAAI,IAAIC,SAAU,SAAChB,GAC7EP,EAAKR,SAAS,CAAC0E,SAAS3D,EAAExC,OAAOyD,WAErCjE,EAAAC,EAAAC,cAAA,WAtCJ,6BAwC8BF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YAAY2D,KAAK,SAASC,IAAI,IAAIC,SAAU,SAAChB,GACpFP,EAAKR,SAAS,CAACuE,GAAGxD,EAAExC,OAAOyD,WAE/BjE,EAAAC,EAAAC,cAAA,WA3CJ,2BA6C4BF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YAAY2D,KAAK,SAASC,IAAI,IAAIC,SAAU,SAAChB,GAClFP,EAAKR,SAAS,CAACwE,OAAOzD,EAAExC,OAAOyD,WAEnCjE,EAAAC,EAAAC,cAAA,WAhDJ,yBAkD0BF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YAAY2D,KAAK,SAASC,IAAI,IAAIC,SAAU,SAAChB,GAChFP,EAAKR,SAAS,CAACyE,KAAK1D,EAAExC,OAAOyD,WAEjCjE,EAAAC,EAAAC,cAAA,WArDJ,uBAuDwBF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YAAY2D,KAAK,SAASC,IAAI,IAAIC,SAAU,SAAChB,GAC9EP,EAAKR,SAAS,CAACmE,SAASpD,EAAExC,OAAOyD,WAErCjE,EAAAC,EAAAC,cAAA,WAGAF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAa2D,KAAK,SAASzD,QAAS,WAClDoC,EAAKP,aADT,iBAK0B,IAA1BvB,KAAKiB,MAAMC,aACflB,KAAKmB,QACD9B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,oCACeS,KAAKiB,MAAM+E,SAD1B,YAC6ChG,KAAKiB,MAAM2E,KADxD,oBAEoB5F,KAAKiB,MAAM6E,OAF/B,YAEgD9F,KAAKiB,MAAM4E,GAF3D,gBAGgB7F,KAAKiB,MAAMwE,SAH3B,YAG8CzF,KAAKiB,MAAM8E,KAHzD,YAIY/F,KAAKiB,MAAMF,SAM/B1B,EAAAC,EAAAC,cAAA,WAAMS,KAAKmB,gBAxGuBoC,aC8E/B2C,6MA1EXjF,MAAM,CACFb,KAAK,GACLkF,aAAc,GACdE,WAAY,GACZE,SAAU,GACVL,aAAc,GACdE,WAAY,GACZE,SAAU,GACV1E,MAAM,uFAGS,IAAAe,EAAA9B,KAEXyD,EAAQ,GACR0C,EAAgB,GAChBC,EAAc,GACdC,EAAY,GACZC,EAAgB,GAChBC,EAAc,GACdC,EAAY,GACZzC,EAAS,GACbhB,MAAM,oDACDC,KAAK,SAAAgB,GAAC,OAAEA,EAAEd,SACVF,KAAK,SAAAzC,GACFA,EAAE0D,UAAU3D,IAAI,SAAA4D,GACZT,EAAQU,KAAKD,EAAE9D,MACf+F,EAAgBhC,KAAKD,EAAEoB,cACvBc,EAAcjC,KAAKD,EAAEsB,YACrBa,EAAYlC,KAAKD,EAAEwB,UACnBY,EAAgBnC,KAAKD,EAAEmB,cACvBkB,EAAcpC,KAAKD,EAAEqB,YACrBiB,EAAYrC,KAAKD,EAAEuB,UACnB1B,EAASI,KAAKD,EAAEnD,SAEpBe,EAAKR,SAAS,CACVlB,KAAKqD,EACL6B,aAAaa,EACbX,WAAWY,EACXV,SAASW,EACThB,aAAaiB,EACbf,WAAWgB,EACXd,SAASe,EACTzF,MAAMgD,uCAKd,IAAAK,EAAApE,KACJ,OACIX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAaE,QAAS,WAAK0E,EAAKhF,MAAMO,WAAW,KAAnE,kBACAN,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,mDACAF,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,8BAEAF,EAAAC,EAAAC,cAACkH,EAAD,MAEApH,EAAAC,EAAAC,cAACmH,EAAD,CACItG,KAAMJ,KAAKiB,MAAMb,KACjBkF,aAActF,KAAKiB,MAAMqE,aACzBE,WAAYxF,KAAKiB,MAAMuE,WACvBE,SAAU1F,KAAKiB,MAAMyE,SACrBL,aAAcrF,KAAKiB,MAAMoE,aACzBE,WAAYvF,KAAKiB,MAAMsE,WACvBE,SAAUzF,KAAKiB,MAAMwE,SACrB1E,MAAOf,KAAKiB,MAAMF,gBArEbwC,aCFV,SAASoD,EAAWvH,GAC/B,IAAIe,EAaJ,OAVIA,EAFDf,EAAMgB,KAAKC,OAAO,EAERjB,EAAMgB,KAAKE,IAAI,SAACC,EAAEC,GAC3B,OAAOnB,EAAAC,EAAAC,cAAA,KAAGkB,IAAKD,GACVD,EADE,KACGnB,EAAMwH,UAAUpG,GADnB,iBACqCpB,EAAMyH,KAAKrG,GADhD,eAEQpB,EAAM0F,QAAQtE,GAFtB,WAGIpB,EAAM2B,MAAMP,MAIbnB,EAAAC,EAAAC,cAAA,mCAGVF,EAAAC,EAAAC,cAAA,WAAMY,OCfO2G,6MACjB7F,MAAM,CACFC,WAAW,KAGfC,QAAQ,KAERC,cAAc,SAACC,GACXtB,EAAKuB,SAAS,CAACJ,WAAWG,OAI9BE,SAAS,WACL,IAAIR,EAAMS,OAAOzB,EAAKkB,MAAM4F,MAAQrF,OAAOzB,EAAKkB,MAAM2F,WAAapF,OAAOzB,EAAKkB,MAAM6D,SACrF/E,EAAKuB,SAAS,CAACP,mFAGX,IAAAe,EAAA9B,KACAI,EAAO,IAAI2B,KACXC,EAAU5B,EAAK6B,WAAa,EAAK,IAAM7B,EAAK8B,UAAY,IAAM9B,EAAK+B,cAwDvE,OAtD6B,IAA1BnC,KAAKiB,MAAMC,WACVlB,KAAKmB,QACL9B,EAAAC,EAAAC,cAAA,QAAM6C,SAAU,SAACC,GAGb,GAFAA,EAAEC,kBAEEC,MAAMT,EAAKb,MAAM4F,OAA6B,KAApB/E,EAAKb,MAAM4F,OACpCtE,MAAMT,EAAKb,MAAM2F,YAAuC,KAAzB9E,EAAKb,MAAM2F,YAC1CrE,MAAMT,EAAKb,MAAM6D,UAAmC,KAAvBhD,EAAKb,MAAM6D,QAAe,CACxD,IAAItC,EAAO,CACPC,OAAO,OACPC,QAAS,CAACC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACjB1C,KAAK4B,EACL6E,KAAK/E,EAAKb,MAAM4F,KAChBD,UAAU9E,EAAKb,MAAM2F,UACrB9B,QAAQhD,EAAKb,MAAM6D,QACnB/D,MAAMe,EAAKb,MAAMF,SAK7BgC,MAAM,+CAAgDP,GAAQQ,KAAK,SAACC,GAChE,OAAOA,EAAIC,OAAOF,KAAKlB,EAAKV,cAAc,SApBlD,eAuBgB/B,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YAAY2D,KAAK,SAASC,IAAI,IAAIC,SAAU,SAAChB,GACtEP,EAAKR,SAAS,CAACuF,KAAKxE,EAAExC,OAAOyD,WAEjCjE,EAAAC,EAAAC,cAAA,WA1BJ,gCA4BiCF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YAAY2D,KAAK,SAASC,IAAI,IAAIC,SAAU,SAAChB,GACvFP,EAAKR,SAAS,CAACsF,UAAUvE,EAAExC,OAAOyD,WAEtCjE,EAAAC,EAAAC,cAAA,WA/BJ,oEAiCqEF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YAAY2D,KAAK,SAASC,IAAI,IAAIC,SAAU,SAAChB,GAC3HP,EAAKR,SAAS,CAACwD,QAAQzC,EAAExC,OAAOyD,WAChCjE,EAAAC,EAAAC,cAAA,WAEJF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAa2D,KAAK,SAASzD,QAAS,WAClDoC,EAAKP,aADT,iBAK0B,IAA1BvB,KAAKiB,MAAMC,aACflB,KAAKmB,QACD9B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,0BAAkBS,KAAKiB,MAAM2F,UAA7B,iBAAsD5G,KAAKiB,MAAM4F,KAAjE,gBACgB7G,KAAKiB,MAAM6D,QAD3B,YAEY9E,KAAKiB,MAAMF,SAM/B1B,EAAAC,EAAAC,cAAA,WAAMS,KAAKmB,gBA5EaoC,aCEfuD,6MAEjB7F,MAAM,CACFb,KAAK,GACLyG,KAAK,GACLD,UAAU,GACV9B,QAAQ,GACR/D,MAAM,uFAGS,IAAAe,EAAA9B,KAEXyD,EAAQ,GACRsD,EAAQ,GACRC,EAAa,GACbC,EAAW,GACXlD,EAAS,GACbhB,MAAM,gDACDC,KAAK,SAAAgB,GAAC,OAAEA,EAAEd,SACVF,KAAK,SAAAzC,GACFA,EAAE0D,UAAU3D,IAAI,SAAA4D,GACZT,EAAQU,KAAKD,EAAE9D,MACf2G,EAAQ5C,KAAKD,EAAE2C,MACfG,EAAa7C,KAAKD,EAAE0C,WACpBK,EAAW9C,KAAKD,EAAEY,SAClBf,EAASI,KAAKD,EAAEnD,SAEpBe,EAAKR,SAAS,CACVlB,KAAKqD,EACLoD,KAAKE,EACLH,UAAUI,EACVlC,QAAQmC,EACRlG,MAAMgD,uCAKd,IAAAK,EAAApE,KACJ,OACAX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAaE,QAAS,WAAK0E,EAAKhF,MAAMO,WAAW,KAAnE,kBACAN,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,yCACAF,EAAAC,EAAAC,cAAA,8BAEAF,EAAAC,EAAAC,cAAC2H,EAAD,MAEA7H,EAAAC,EAAAC,cAACoH,EAAD,CACIvG,KAAMJ,KAAKiB,MAAMb,KACjByG,KAAM7G,KAAKiB,MAAM4F,KACjBD,UAAW5G,KAAKiB,MAAM2F,UACtB9B,QAAS9E,KAAKiB,MAAM6D,QACpB/D,MAAOf,KAAKiB,MAAMF,gBApDEwC,aCsCrB4D,6MAlCXlG,MAAM,CACFmG,cAAe,KAGnBnH,iBAAmB,SAACoH,GAChBtH,EAAKuB,SAAS,CAAC8F,cAAcC,6EAI7B,IAAIC,EAAe,KAiBnB,OAhB+B,IAA5BtH,KAAKiB,MAAMmG,gBACVE,EAAejI,EAAAC,EAAAC,cAACO,EAAD,CAAYH,WAAYK,KAAKZ,MAAMO,WAAYM,iBAAkBD,KAAKC,oBAE1D,IAA5BD,KAAKiB,MAAMmG,gBACVE,EAAejI,EAAAC,EAAAC,cAACgI,EAAD,CAAW5H,WAAYK,KAAKZ,MAAMO,cAEtB,IAA5BK,KAAKiB,MAAMmG,gBACVE,EAAejI,EAAAC,EAAAC,cAACiI,EAAD,CAAS7H,WAAYK,KAAKZ,MAAMO,cAEpB,IAA5BK,KAAKiB,MAAMmG,gBACVE,EAAejI,EAAAC,EAAAC,cAACkI,EAAD,CAAY9H,WAAYK,KAAKZ,MAAMO,cAEvB,IAA5BK,KAAKiB,MAAMmG,gBACVE,EAAejI,EAAAC,EAAAC,cAACmI,EAAD,CAAQ/H,WAAYK,KAAKZ,MAAMO,cAI9CN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACV8H,UA7BI/D,aCLN,SAASoE,EAAWvI,GAC/B,IAAIe,EAcA,OAXAA,EAFDf,EAAMgB,KAAKC,OAAO,EAERjB,EAAMgB,KAAKE,IAAI,SAACC,EAAEC,GAC3B,OAAOnB,EAAAC,EAAAC,cAAA,KAAGkB,IAAKD,GACVD,EADE,UACgBnB,EAAMwI,IAAIpH,GAD1B,UAEWpB,EAAMyI,IAAIrH,GAFrB,UAGWpB,EAAM0I,MAAMtH,GAHvB,YAIKpB,EAAM2B,MAAMP,MAIVnB,EAAAC,EAAAC,cAAA,mCAGVF,EAAAC,EAAAC,cAAA,WAAMY,OChBG4H,6MACjB9G,MAAM,CACFC,WAAW,KAGfC,QAAQ,KAERC,cAAc,SAACC,GACXtB,EAAKuB,SAAS,CAACJ,WAAWG,OAI9BE,SAAS,WACL,IAAIR,EAAOS,OAAOzB,EAAKkB,MAAM2G,KAC5BpG,OAAOzB,EAAKkB,MAAM4G,KAClBrG,OAAOzB,EAAKkB,MAAM6G,OACnB/H,EAAKuB,SAAS,CAACP,mFAGX,IAAAe,EAAA9B,KACAI,EAAO,IAAI2B,KACXC,EAAU5B,EAAK6B,WAAa,EAAK,IAAM7B,EAAK8B,UAAY,IAAM9B,EAAK+B,cAmDvE,OAjD6B,IAA1BnC,KAAKiB,MAAMC,WACdlB,KAAKmB,QACD9B,EAAAC,EAAAC,cAAA,QAAM6C,SAAU,SAACC,GAGb,GAFAA,EAAEC,kBAEEC,MAAMT,EAAKb,MAAM2G,MAA2B,KAAnB9F,EAAKb,MAAM2G,MACnCrF,MAAMT,EAAKb,MAAM4G,MAA0B,KAAnB/F,EAAKb,MAAM4G,MACnCtF,MAAMT,EAAKb,MAAM6G,QAA8B,KAArBhG,EAAKb,MAAM6G,MAAa,CACnD,IAAItF,EAAO,CACPC,OAAO,OACPC,QAAS,CAACC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACjB1C,KAAK4B,EACL4F,IAAI9F,EAAKb,MAAM2G,IACfC,IAAI/F,EAAKb,MAAM4G,IACfC,MAAMhG,EAAKb,MAAM6G,MACjB/G,MAAMe,EAAKb,MAAMF,SAK7BgC,MAAM,+CAAgDP,GAAQQ,KAAK,SAACC,GAChE,OAAOA,EAAIC,SACZF,KAAKlB,EAAKV,cAAc,OArB/B,UAuBW/B,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YAAY2D,KAAK,SAASC,IAAI,IAAIC,SAAU,SAAChB,GACjEP,EAAKR,SAAS,CAACsG,IAAIvF,EAAExC,OAAOyD,WAC5BjE,EAAAC,EAAAC,cAAA,WAzBR,UA0BWF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YAAY2D,KAAK,SAASC,IAAI,IAAIC,SAAU,SAAChB,GACjEP,EAAKR,SAAS,CAACuG,IAAIxF,EAAExC,OAAOyD,WAC5BjE,EAAAC,EAAAC,cAAA,WA5BR,YA6BaF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YAAY2D,KAAK,SAASC,IAAI,IAAIC,SAAU,SAAChB,GACnEP,EAAKR,SAAS,CAACwG,MAAMzF,EAAExC,OAAOyD,WAC9BjE,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAa2D,KAAK,SAASzD,QAAS,WAClDoC,EAAKP,aADT,iBAI2B,IAA1BvB,KAAKiB,MAAMC,aAChBlB,KAAKmB,QACD9B,EAAAC,EAAAC,cAAA,+BACUS,KAAKiB,MAAM2G,IADrB,UAEU5H,KAAKiB,MAAM4G,IAFrB,YAGY7H,KAAKiB,MAAM6G,MAHvB,YAIY9H,KAAKiB,MAAMF,QAM3B1B,EAAAC,EAAAC,cAAA,WAAMS,KAAKmB,gBAzEkBoC,aCGpByE,6MACjB/G,MAAM,CACFb,KAAK,GACLwH,IAAI,GACJC,IAAI,GACJC,MAAM,GACN/G,MAAM,uFAGS,IAAAe,EAAA9B,KACXyD,EAAQ,GACRwE,EAAO,GACPC,EAAO,GACPC,EAAS,GACTpE,EAAS,GACbhB,MAAM,gDACDC,KAAK,SAAAgB,GAAC,OAAEA,EAAEd,SACVF,KAAK,SAAAzC,GACFA,EAAE0D,UAAU3D,IAAI,SAAA4D,GACZT,EAAQU,KAAKD,EAAE9D,MACf6H,EAAO9D,KAAKD,EAAE0D,KACdM,EAAO/D,KAAKD,EAAE2D,KACdM,EAAShE,KAAKD,EAAE4D,OAChB/D,EAASI,KAAKD,EAAEnD,SAEpBe,EAAKR,SAAS,CACVlB,KAAKqD,EACLmE,IAAIK,EACJJ,IAAIK,EACJJ,MAAMK,EACNpH,MAAMgD,uCAKd,IAAAK,EAAApE,KACJ,OACIX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAaE,QAAS,WAAK0E,EAAKhF,MAAMO,WAAW,KAAnE,kBACAN,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,6DACAF,EAAAC,EAAAC,cAAA,iEACAF,EAAAC,EAAAC,cAAC6I,EAAD,MACA/I,EAAAC,EAAAC,cAACoI,EAAD,CACIvH,KAAMJ,KAAKiB,MAAMb,KACjBwH,IAAK5H,KAAKiB,MAAM2G,IAChBC,IAAK7H,KAAKiB,MAAM4G,IAChBC,MAAO9H,KAAKiB,MAAM6G,MAClB/G,MAAOf,KAAKiB,MAAMF,gBAjDFwC,aCkCrB8E,6MA9BbpH,MAAM,CACJmG,cAAe,KAGjBzH,WAAa,SAAC0H,GACZtH,EAAKuB,SAAS,CAAC8F,cAAcC,6EAI7B,IAAIC,EAAe,KAanB,OAZgC,IAA7BtH,KAAKiB,MAAMmG,cACZE,EAAejI,EAAAC,EAAAC,cAAC+I,EAAD,CAAM3I,WAAYK,KAAKL,aAEH,IAA7BK,KAAKiB,MAAMmG,cACjBE,EAAejI,EAAAC,EAAAC,cAACgJ,EAAD,CAAQ5I,WAAYK,KAAKL,aAEL,IAA7BK,KAAKiB,MAAMmG,gBACjBE,EAAejI,EAAAC,EAAAC,cAACiJ,EAAD,CAAQ7I,WAAYK,KAAKL,cAMxCN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZ8H,UAzBS/D,aCIEkF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1J,EAAAC,EAAAC,cAACyJ,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrG,KAAK,SAAAsG,GACjCA,EAAaC","file":"static/js/main.dea737f0.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Home(props){\n    return (\n        <div className=\"App\">\n            <button className=\"buttonStyle\" id=\"topButton\" onClick={()=>props.changeView(1)}>Pull Ups!</button>\n            <br/>\n            <button className=\"buttonStyle\" onClick={()=>props.changeView(2)}>Push Ups!</button>\n            <br/>\n            <div id=\"infoStyle\">For more detailed info and instructions, </div>\n            <div>visit the Armstrong Pullup Program home page:</div>\n            <br/>\n            <a className=\"homeButton\" id=\"armHomeStyle\" href=\"http://armstrongpullupprogram.com/\" target=\"_blank\">Armstrong Program</a>\n            {/* <br/>\n            <button onClick={()=>props.changeView(2)}>Stats!</button> */}\n        </div>\n    );\n}\n\nexport default Home;\n","import React from 'react';\n\nexport default function PullUpHome(props){\n    \n    return (\n        <div className=\"App\">\n        <button className=\"homeButton\" onClick={()=>{this.props.changeView(0)}}>Return to Home</button>\n        <br/>\n        <button className=\"buttonStyle\" onClick={()=>props.changePullUpView(1)}>Day 1 : Max Effort</button>\n        <br/>\n        <button className=\"buttonStyle\" onClick={()=>props.changePullUpView(2)}>Day 2 : Pyramid</button>\n        <br/>\n        <button className=\"buttonStyle\" onClick={()=>props.changePullUpView(3)}>Day 3 : Grip Switch</button>\n        <br/>\n        <button className=\"buttonStyle\" onClick={()=>props.changePullUpView(4)}>Day 4 : Max Day</button>\n        <br/>\n        <p>On Day 5, repeat the workout you felt was hardest</p>\n        <p>This may change from week to week</p>\n    </div>\n    );\n}","import React from 'react'\n\nfunction MaxEffortSets(props){\n    let showSets;\n    if(props.date.length>0){\n        // map by date, use array position to correlate other data\n        showSets=props.date.map((d,i)=>{\n        return <p key={i}>\n            {d}: &#40;1&#41;: {props.setOne[i]}, \n            &#40;2&#41;: {props.setTwo[i]}, \n            &#40;3&#41;: {props.setThree[i]}, \n            &#40;4&#41;: {props.setFour[i]}, \n            &#40;5&#41;: {props.setFive[i]}, \n            Total: {props.total[i]}\n            </p>\n        }\n        )}\n        else showSets=<p>No Past Data Available</p>\n\n        return(\n            <div>{showSets}</div>\n        )\n}\n\nexport default MaxEffortSets;","import React, { Component } from 'react';\n// import { Container, Row, Col } from 'reactstrap';\n\nexport default class MaxEffortInput extends Component{\n    state={\n        whatToShow:0 //whatToShow: 0 renders inputs, 1 renders results upon completion \n    }\n\n    content={}\n    //content alternates between rendering inputs and session results\n    changeContent=(x)=>{\n        this.setState({whatToShow:x})\n    }\n\n    // formula to calculate total number of pullups per session\n    getTotal=()=>{\n        let total= Number(this.state.repsOne)\n        +Number(this.state.repsTwo)\n        +Number(this.state.repsThree)\n        +Number(this.state.repsFour)\n        +Number(this.state.repsFive);\n        this.setState({total})\n    }\n\n    render(){\n        var date = new Date();\n        var newDate= (date.getMonth() + 1) + '/' + date.getDate() + '/' + date.getFullYear();\n        \n        if(this.state.whatToShow === 0){\n        this.content=\n            <form onSubmit={(e)=>{\n                e.preventDefault();\n                // conditionals to validate inputs, empty string to prevent deleted inputs from validating\n                if(!isNaN(this.state.repsOne) && this.state.repsOne !== '' &&\n                    !isNaN(this.state.repsTwo) && this.state.repsTwo !== '' &&\n                    !isNaN(this.state.repsThree) && this.state.repsThree !== '' &&\n                    !isNaN(this.state.repsFour) && this.state.repsFour !== '' &&\n                    !isNaN(this.state.repsFive) && this.state.repsFive !== ''){\n                        let newSet={\n                            method:\"POST\",\n                            headers: {\"Content-Type\": \"application/json\"},\n                            body: JSON.stringify({\n                                date:newDate,\n                                setOne:this.state.repsOne,\n                                setTwo:this.state.repsTwo,\n                                setThree:this.state.repsThree,\n                                setFour:this.state.repsFour,\n                                setFive:this.state.repsFive,\n                                total:this.state.total\n                            })\n                        }\n                        //post sends current session data to database and sets state to render, \n                        //submit button calculates total, second .then renders results\n                    fetch(\"https://armstrongserver.herokuapp.com/maxeffort\", newSet)\n                    .then((res)=>{return res.json();})\n                    .then(this.changeContent(1));\n                }}}>\n                Set One<input className=\"inputMarg\" type=\"number\" min=\"0\" onChange={(e)=>{\n                    this.setState({repsOne:e.target.value})\n                }}/><br/>\n                Set Two<input className=\"inputMarg\" type=\"number\" min=\"0\" onChange={(e)=>{\n                    this.setState({repsTwo:e.target.value})\n                }}/><br/>\n                Set Three<input className=\"inputMarg\" type=\"number\" min=\"0\" onChange={(e)=>{\n                    this.setState({repsThree:e.target.value})\n                }}/><br/>\n                Set Four<input className=\"inputMarg\" type=\"number\" min=\"0\" onChange={(e)=>{\n                    this.setState({repsFour:e.target.value})\n                }}/><br/>\n                Set Five<input className=\"inputMarg\" type=\"number\" min=\"0\" onChange={(e)=>{\n                    this.setState({repsFive:e.target.value})\n                }}/><br/>\n                <button className=\"homeButton\" type='submit' onClick={()=>{    \n                        this.getTotal();\n                }}>Complete Set\n                </button>\n            </form>\n        }else if(this.state.whatToShow === 1){\n            this.content = \n                <p>This Session: \n                    &#40;1&#41;: {this.state.repsOne}, \n                    &#40;2&#41;: {this.state.repsTwo}, \n                    &#40;3&#41;: {this.state.repsThree}, \n                    &#40;4&#41;: {this.state.repsFour}, \n                    &#40;5&#41;: {this.state.repsFive}, \n                    Total: {this.state.total}\n                </p>\n                \n        }\n            \n        return(\n            <div>{this.content}</div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport MaxEffortSets from './MaxEffortSets';\nimport MaxEffortInput from './MaxEffortInput';\n\nclass MaxEffort extends Component{\n    //state stores data from previous workouts\n    state={\n        date:[],\n        setOne:[],\n        setTwo:[],\n        setThree:[],\n        setFour:[],\n        setFive:[],\n        total:[],\n    }\n\n    componentDidMount(){\n        //fetch call builds these arrays which populates state\n        let dateArr=[];\n        let setOneArr=[];\n        let setTwoArr=[];\n        let setThreeArr=[];\n        let setFourArr=[];\n        let setFiveArr=[];\n        let totalArr=[];\n        fetch(\"https://armstrongserver.herokuapp.com/maxeffort\")\n            .then(r=>r.json())\n            .then(d=>{\n                d.reverse().map(t=>{ //reverse array so data shows most recent data first\n                    dateArr.push(t.date)\n                    setOneArr.push(t.setOne)\n                    setTwoArr.push(t.setTwo)\n                    setThreeArr.push(t.setThree)\n                    setFourArr.push(t.setFour)\n                    setFiveArr.push(t.setFive)\n                    totalArr.push(t.total)\n                })\n                this.setState({\n                    date:dateArr,\n                    setOne:setOneArr,\n                    setTwo:setTwoArr,\n                    setThree:setThreeArr,\n                    setFour:setFourArr,\n                    setFive:setFiveArr,\n                    total:totalArr\n                })\n            })\n    }\n\n    render(){\n        \n        return (\n            <div className=\"App\">\n                <button className=\"homeButton\" onClick={()=>{this.props.changeView(0)}}>Return to Home</button>\n                <h1>DAY 1: MAX EFFORT</h1>\n                <h3>5 max effort sets</h3>\n                <h2>REST : 90 seconds</h2>\n                {/* input component renders the input forms- upon completion, renders session results */}\n                <MaxEffortInput/>\n                {/* sets component renders past workout data */}\n                <MaxEffortSets\n                    date={this.state.date} \n                    setOne={this.state.setOne} \n                    setTwo={this.state.setTwo} \n                    setThree={this.state.setThree} \n                    setFour={this.state.setFour} \n                    setFive={this.state.setFive} \n                    total={this.state.total}\n                />\n            </div>\n        );\n        }\n    }\n    \n    export default MaxEffort;\n","import React from 'react'\n\nexport default function PyramidSets(props){\n    let showSets;\n    if(props.date.length>0){\n        // map by date, use array position to correlate other data\n        showSets=props.date.map((d,i)=>{\n        return <p key={i}>\n            {d}: Trying {props.missed[i]}, \n            Failed on: {props.last[i]}, \n            Max: {props.max[i]}, \n            Total: {props.total[i]}\n            </p>\n    }\n    )}\n    else showSets=<p>No Past Data Available</p>\n\n    return(\n        <div>{showSets}</div>\n    )\n}","import React, { Component } from 'react';\n\nexport default class PyramidInputs extends Component{\n    state={\n        whatToShow:0 //whatToShow: 0 renders inputs, 1 renders results upon completion \n    }\n\n    content={}\n    //content alternates between rendering inputs and session results\n    changeContent=(x)=>{\n        this.setState({whatToShow:x})\n    }\n\n    // formula to calculate total number of pullups per session\n    getTotal=()=>{\n        let n=Number(this.state.missed);\n        let total=((n*(n+1))/2) + Number(this.state.last) + Number(this.state.max)\n        this.setState({total})\n    }\n   \n    render(){\n        var date = new Date();\n        var newDate= (date.getMonth() + 1) + '/' + date.getDate() + '/' + date.getFullYear();\n\n        if(this.state.whatToShow === 0){\n            this.content=\n            <form onSubmit={(e)=>{\n                e.preventDefault();\n                // conditionals to validate inputs, empty string to prevent deleted inputs from validating\n                if(!isNaN(this.state.missed) && this.state.missed !==''&&\n                    !isNaN(this.state.last) && this.state.last !== ''&&\n                    !isNaN(this.state.max) && this.state.max !== ''){\n                    let newSet={\n                        method:\"POST\",\n                        headers: {\"Content-Type\": \"application/json\"},\n                        body: JSON.stringify({\n                            date:newDate,\n                            missedSet:this.state.missed,\n                            lastSet:this.state.last,\n                            max:this.state.max,\n                            total:this.state.total\n                        })\n                    } \n                    //post sends current session data to database and sets state to render, \n                    //submit button calculates total, second .then renders results\n                fetch(\"https://armstrongserver.herokuapp.com/pyramid\", newSet).then((res)=>{\n                    return res.json().then(this.changeContent(1));\n                })\n                }}}>\n                Trying<input type=\"number\" min=\"0\" className=\"inputMarg\" onChange={(e)=>{\n                    this.setState({missed:e.target.value})\n                }}/>\n                <p>Which set were you attempting, but did not complete?</p><br/>\n\n                Last Completed Rep<input type=\"number\" min=\"0\" className=\"inputMarg\" onChange={(e)=>{\n                    this.setState({last:e.target.value})\n                }}/>\n                <p>How many reps did you complete on the failed set?</p><br/>\n\n                Max Set Total Reps<input type=\"number\" min=\"0\" className=\"inputMarg\" onChange={(e)=>{\n                    this.setState({max:e.target.value})\n                }}/><br/>\n\n                <button className=\"homeButton\" type='submit' onClick={()=>{\n                    this.getTotal();\n                }}>Complete Set</button>\n            </form>\n        }\n        else if(this.state.whatToShow === 1){\n            this.content = \n                <p>This Session: \n                    Trying: {this.state.missed}, \n                    Failed on: {this.state.last}, \n                    Max: {this.state.max}, \n                    Total: {this.state.total}\n                    {/* Will need to move the fetch call to the Home button when implementing edit button */}\n                </p>\n        }\n        return(\n            <div>{this.content}</div>\n        )\n    }\n}\n\n","import React, { Component } from 'react';\nimport PyramidSets from './PyramidSets'\nimport PyramidInputs from './PyramidInputs';\n\nclass Pyramid extends Component{\n    //state stores data from previous workouts\n    state={\n        date:[],\n        missed:[],\n        last:[],\n        max:[],\n        total:[]\n    }\n    \n    componentDidMount(){\n        //fetch call builds these arrays which populates state\n        let dateArr=[]\n        let missedArr=[];\n        let lastArr=[];\n        let maxArr=[];\n        let totalArr=[];\n        fetch(\"https://armstrongserver.herokuapp.com/pyramid\")\n            .then(r=>r.json())\n            .then(d=>{\n                d.reverse().map(t=>{ //reverse array so data shows most recent data first\n                    dateArr.push(t.date)\n                    missedArr.push(t.missedSet)\n                    lastArr.push(t.lastSet)\n                    maxArr.push(t.max)\n                    totalArr.push(t.total)\n                })\n                this.setState({\n                    date:dateArr,\n                    missed:missedArr,\n                    last:lastArr,\n                    max:maxArr,\n                    total:totalArr\n                })\n            })\n    }\n\n    render(){\n        \n        return (\n            <div className=\"App\">\n                <button className=\"homeButton\" onClick={()=>{this.props.changeView(0)}}>Return to Home</button>\n                <h1>DAY 2: PYRAMID</h1>\n                <h3>Pyramid of sets of 1, 2, 3, 4, etc. until missed set</h3>\n                <h3>Then one max set</h3>\n                <h2>REST: 10 seconds per pull-up in last set</h2>\n                {/* input component renders the input forms- upon completion, renders session results */}\n                <PyramidInputs />\n                {/* sets component renders past workout data */}\n                <PyramidSets \n                    date={this.state.date} \n                    missed={this.state.missed} \n                    last={this.state.last} \n                    max={this.state.max} \n                    total={this.state.total}\n                />\n            </div>\n            );\n        }\n}\n\nexport default Pyramid;\n","import React from 'react'\n\nfunction GripSwitchSets(props){\n    let showSets;\n    if(props.date.length>0){\n        // map by date, use array position to correlate other data\n        showSets=props.date.map((d,i)=>{\n        return <p key={i}>\n            {d}: Overhand Reps: {props.overHandSets[i]} sets of {props.overHandReps[i]}; \n            Inward Facing Reps:{props.inwardSets[i]} sets of {props.inwardReps[i]};\n            Wide Grip Reps: {props.wideSets[i]} sets of {props.wideReps[i]};\n            Total: {props.total[i]}\n            </p>\n        }\n        )}\n        else showSets=<p>No Past Data Available</p>\n\n        return(\n            <div>{showSets}</div>\n        )\n}\n\nexport default GripSwitchSets;","import React, { Component } from 'react';\n\nexport default class GripSwitchInputs extends Component{\n    state={\n        whatToShow:0 //whatToShow: 0 renders inputs, 1 renders results upon completion \n    }\n\n    content={}\n    //content alternates between rendering inputs and session results\n    changeContent=(x)=>{\n        this.setState({whatToShow:x})\n    }\n\n    // formula to calculate total number of pullups per session\n    getTotal=()=>{\n        let total=Number(this.state.over)*Number(this.state.wideSets)\n        +Number(this.state.in)*Number(this.state.inSets)\n        +Number(this.state.wide)*Number(this.state.wideSets);\n        this.setState({total})\n    }\n\n    render(){\n        var date = new Date();\n        var newDate= (date.getMonth() + 1) + '/' + date.getDate() + '/' + date.getFullYear();\n\n        if(this.state.whatToShow === 0){\n            this.content=\n            <form onSubmit={(e)=>{\n                e.preventDefault();\n                // conditionals to validate inputs, empty string to prevent deleted inputs from validating\n                if(!isNaN(this.state.over) && this.state.over !== '' &&\n                    !isNaN(this.state.in) && this.state.in !== '' &&\n                    !isNaN(this.state.wide) && this.state.wide !== '' &&\n                    !isNaN(this.state.overSets) && this.state.overSets !== '' &&\n                    !isNaN(this.state.inSets) && this.state.insets !== '' &&\n                    !isNaN(this.state.wideSets)) {\n                    let newSet={\n                        method:\"POST\",\n                        headers: {\"Content-Type\": \"application/json\"},\n                        body: JSON.stringify({\n                            date:newDate,\n                            overHandReps:this.state.over,\n                            inwardReps:this.state.in,\n                            wideReps:this.state.wide,\n                            overHandSets:this.state.overSets,\n                            inwardSets:this.state.inSets,\n                            wideSets:this.state.wideSets,\n                            total:this.state.total\n                        })\n                    }\n                    //post sends current session data to database and sets state to render, \n                    //submit button calculates total, second .then renders results\n                fetch(\"https://armstrongserver.herokuapp.com/gripswitch\", newSet).then((res)=>{\n                    return res.json().then(this.changeContent(1));\n                })\n                }}}>\n\n                Reps per Overhand Set<input className=\"inputMarg\" type=\"number\" min=\"0\" onChange={(e)=>{\n                    this.setState({over:e.target.value})\n                }}/>\n                <br/>\n\n                Total Overhand Sets<input className=\"inputMarg\" type=\"number\" min=\"0\" onChange={(e)=>{\n                    this.setState({overSets:e.target.value})\n                }}></input>\n                <br/>\n\n                Reps per Inward Facing Set<input className=\"inputMarg\" type=\"number\" min=\"0\" onChange={(e)=>{\n                    this.setState({in:e.target.value})\n                }}/>\n                <br/>\n\n                Total Inward Facing Sets<input className=\"inputMarg\" type=\"number\" min=\"0\" onChange={(e)=>{\n                    this.setState({inSets:e.target.value})\n                }}></input>\n                <br/>\n\n                Reps per Wide Grip Set<input className=\"inputMarg\" type=\"number\" min=\"0\" onChange={(e)=>{\n                    this.setState({wide:e.target.value})\n                }}/>\n                <br/>\n\n                Total Wide Grip Sets<input className=\"inputMarg\" type=\"number\" min=\"0\" onChange={(e)=>{\n                    this.setState({wideSets:e.target.value})\n                }}></input>\n                <br/>\n                {/* data from these inputs will individually line up differently when rendering: y sets of x */}\n\n                <button className=\"homeButton\" type='submit' onClick={()=>{\n                    this.getTotal();\n                }}>Complete Set</button>\n            </form>\n        }\n        else if(this.state.whatToShow === 1){\n            this.content = \n                <div>\n                    <p>This Session: \n                        Overhand: {this.state.overSets} Sets of {this.state.over};\n                        Inward Facing: {this.state.inSets} Sets of {this.state.in};\n                        Wide Grip: {this.state.wideSets} Sets of {this.state.wide};\n                        Total: {this.state.total}\n                    </p>\n                </div>\n        }\n\n        return(\n            <div>{this.content}</div>\n        )\n    }\n}\n\n\n","import React, { Component } from 'react';\nimport GripSwitchSets from './GripSwitchSets';\nimport GripSwitchInputs from './GripSwitchInputs';\n\nclass GripSwitch extends Component{\n    //state stores data from previous workouts\n    state={\n        date:[],\n        overHandReps: [],\n        inwardReps: [],\n        wideReps: [],\n        overHandSets: [],\n        inwardSets: [],\n        wideSets: [],\n        total:[]\n    }\n    \n    componentDidMount(){\n        //fetch call builds these arrays which populates state\n        let dateArr=[];\n        let overHandRepsArr=[];\n        let inwardRepsArr=[];\n        let wideRepsArr=[];\n        let overHandSetsArr=[];\n        let inwardSetsArr=[];\n        let wideSetsArr=[];\n        let totalArr=[];\n        fetch(\"https://armstrongserver.herokuapp.com/gripswitch\")\n            .then(r=>r.json())\n            .then(d=>{\n                d.reverse().map(t=>{ //reverse array so data shows most recent data first\n                    dateArr.push(t.date)\n                    overHandRepsArr.push(t.overHandReps)\n                    inwardRepsArr.push(t.inwardReps)\n                    wideRepsArr.push(t.wideReps)\n                    overHandSetsArr.push(t.overHandSets)\n                    inwardSetsArr.push(t.inwardSets)\n                    wideSetsArr.push(t.wideSets)\n                    totalArr.push(t.total)\n                })\n                this.setState({\n                    date:dateArr,\n                    overHandReps:overHandRepsArr,\n                    inwardReps:inwardRepsArr,\n                    wideReps:wideRepsArr,\n                    overHandSets:overHandSetsArr,\n                    inwardSets:inwardSetsArr,\n                    wideSets:wideSetsArr,\n                    total:totalArr\n                })\n            })\n    }\n\n    render(){\n        return (\n            <div className=\"App\">\n                <button className=\"homeButton\" onClick={()=>{this.props.changeView(0)}}>Return to Home</button>\n                <h1>DAY 3: GRIP SWITCH</h1>\n                <h3>3 sets overhand</h3>\n                <h3>3 sets palms inward, pinkies together</h3>\n                <h3>3 sets wide grip</h3>\n                <h2>REST: 60 seconds</h2>\n                {/* input component renders the input forms- upon completion, renders session results */}\n                <GripSwitchInputs />\n                {/* sets component renders past workout data */}\n                <GripSwitchSets \n                    date={this.state.date}\n                    overHandReps={this.state.overHandReps}\n                    inwardReps={this.state.inwardReps}\n                    wideReps={this.state.wideReps}\n                    overHandSets={this.state.overHandSets}\n                    inwardSets={this.state.inwardSets}\n                    wideSets={this.state.wideSets}\n                    total={this.state.total}\n                />\n            </div>\n    );\n    }\n}\n\nexport default GripSwitch;","import React from 'react'\n\nexport default function MaxDaySets(props){\n    let showSets;\n    if(props.date.length>0){\n        // map by date, use array position to correlate other data\n        showSets=props.date.map((d,i)=>{    \n        return <p key={i}>\n            {d}: {props.totalSets[i]} Full sets of {props.reps[i]}, \n            Remainder {props.lastSet[i]},\n            Total {props.total[i]}\n            </p>\n    }\n    )}\n    else showSets=<p>No Past Data Available</p>\n\n    return(\n        <div>{showSets}</div>\n    )\n}","import React, { Component } from 'react';\n\nexport default class MaxDay extends Component{\n    state={\n        whatToShow:0 //whatToShow: 0 renders inputs, 1 renders results upon completion \n    }\n\n    content={}\n    //content alternates between rendering inputs and session results\n    changeContent=(x)=>{\n        this.setState({whatToShow:x})\n    }\n\n    // formula to calculate total number of pullups per session\n    getTotal=()=>{\n        let total=Number(this.state.reps) * Number(this.state.totalSets) + Number(this.state.lastSet);\n        this.setState({total});\n    }\n\n    render(){\n        var date = new Date();\n        var newDate= (date.getMonth() + 1) + '/' + date.getDate() + '/' + date.getFullYear();\n\n        if(this.state.whatToShow === 0){\n            this.content=\n            <form onSubmit={(e)=>{\n                e.preventDefault();\n                // conditionals to validate inputs, empty string to prevent deleted inputs from validating\n                if(!isNaN(this.state.reps) && this.state.reps !== '' &&\n                    !isNaN(this.state.totalSets) && this.state.totalSets !== '' &&\n                    !isNaN(this.state.lastSet) && this.state.lastSet !== ''){\n                    let newSet={\n                        method:\"POST\",\n                        headers: {\"Content-Type\": \"application/json\"},\n                        body: JSON.stringify({\n                            date:newDate,\n                            reps:this.state.reps,\n                            totalSets:this.state.totalSets,\n                            lastSet:this.state.lastSet,\n                            total:this.state.total\n                        })\n                    }\n                    //post sends current session data to database and sets state to render, \n                    //submit button calculates total, second .then renders results\n                fetch(\"https://armstrongserver.herokuapp.com/maxday\", newSet).then((res)=>{\n                    return res.json().then(this.changeContent(1));\n                })\n                }}}>\n                Reps per Set<input className=\"inputMarg\" type=\"number\" min=\"0\" onChange={(e)=>{\n                    this.setState({reps:e.target.value})\n                }}/>\n                <br/>\n\n                Total Number of Complete Sets<input className=\"inputMarg\" type=\"number\" min=\"0\" onChange={(e)=>{\n                    this.setState({totalSets:e.target.value})\n                }}/>\n                <br/>\n\n                If your final set was incomplete, how many reps did you complete?<input className=\"inputMarg\" type=\"number\" min=\"0\" onChange={(e)=>{\n                    this.setState({lastSet:e.target.value})\n                }}/><br/>\n\n                <button className=\"homeButton\" type='submit' onClick={()=>{\n                    this.getTotal();\n                }}>Complete Set</button>\n            </form>\n        }\n        else if(this.state.whatToShow === 1){\n            this.content = \n                <div>\n                    <p>This Session: {this.state.totalSets} Full Sets of {this.state.reps},\n                        Remainder: {this.state.lastSet}, \n                        Total: {this.state.total}\n                    </p>\n                    {/* Will need to move the fetch call to the Home button when implementing edit button */}\n                </div>\n        }\n        return(\n            <div>{this.content}</div>\n        )\n    }\n\n\n\n\n\n\n}","import React, { Component } from 'react';\nimport MaxDaySets from './MaxDaySets';\nimport MaxDayInputs from './MaxDayInputs';\n\nexport default class MaxDay extends Component{\n    //state stores data from previous workouts\n    state={\n        date:[],\n        reps:[],\n        totalSets:[],\n        lastSet:[],\n        total:[]\n    }\n\n    componentDidMount(){\n        //fetch call builds these arrays which populates state\n        let dateArr=[];\n        let repsArr=[];\n        let totalSetsArr=[];\n        let lastSetArr=[];\n        let totalArr=[];\n        fetch(\"https://armstrongserver.herokuapp.com/maxday\")\n            .then(r=>r.json())\n            .then(d=>{\n                d.reverse().map(t=>{ //reverse array so data shows most recent data first\n                    dateArr.push(t.date)\n                    repsArr.push(t.reps)\n                    totalSetsArr.push(t.totalSets)\n                    lastSetArr.push(t.lastSet)\n                    totalArr.push(t.total)\n                })\n                this.setState({\n                    date:dateArr,\n                    reps:repsArr,\n                    totalSets:totalSetsArr,\n                    lastSet:lastSetArr,\n                    total:totalArr\n                })\n            })\n    }\n\n    render(){\n        return (\n        <div className=\"App\">\n            <button className=\"homeButton\" onClick={()=>{this.props.changeView(0)}}>Return to Home</button>\n            <h1>DAY 4: MAX DAY</h1>\n            <h3>Max number of training sets</h3>\n            <h2>REST: 60 seconds</h2>\n            {/* input component renders the input forms- upon completion, renders session results */}\n            <MaxDayInputs/>\n            {/* sets component renders past workout data */}\n            <MaxDaySets\n                date={this.state.date}\n                reps={this.state.reps}\n                totalSets={this.state.totalSets}\n                lastSet={this.state.lastSet}\n                total={this.state.total}\n            />\n        </div>\n        );\n    }\n}\n\n","import React, { Component } from 'react';\nimport PullUpHome from './PullUpHome';\nimport MaxEffort from './workouts/maxeffort/MaxEffort'\nimport Pyramid from './workouts/pyramid/Pyramid'\nimport GripSwitch from './workouts/gripswitch/GripSwitch'\nimport MaxDay from './workouts/maxday/MaxDay'\n\nclass PullUp extends Component{\n    state={\n        whatToDisplay: 0,\n    }\n    \n    changePullUpView = (view)=>{\n        this.setState({whatToDisplay:view})\n    }\n\n    render(){\n        let whatToRender = null;\n        if(this.state.whatToDisplay ===0){\n            whatToRender = <PullUpHome changeView={this.props.changeView} changePullUpView={this.changePullUpView}/>\n        }\n        if(this.state.whatToDisplay ===1){\n            whatToRender = <MaxEffort changeView={this.props.changeView}/>\n        }\n        if(this.state.whatToDisplay ===2){\n            whatToRender = <Pyramid changeView={this.props.changeView}/>\n        }\n        if(this.state.whatToDisplay ===3){\n            whatToRender = <GripSwitch changeView={this.props.changeView}/>\n        }\n        if(this.state.whatToDisplay ===4){\n            whatToRender = <MaxDay changeView={this.props.changeView}/>\n        }\n\n        return (\n            <div className=\"App\">\n                {whatToRender}\n            </div>\n        );\n    }\n}\n\nexport default PullUp;","import React from 'react'\n\nexport default function PushUpSets(props){\n    let showSets;\n    if(props.date.length>0){\n        // map by date, use array position to correlate other data\n        showSets=props.date.map((d,i)=>{\n        return <p key={i}>\n            {d}: &#40;1&#41;: {props.one[i]}, \n            &#40;2&#41;: {props.two[i]}, \n            &#40;3&#41;: {props.three[i]}, \n            Total: {props.total[i]}\n            </p>\n        }\n        )}\n        else showSets=<p>No Past Data Available</p>\n\n        return(\n            <div>{showSets}</div>\n        )\n}\n\n","import React, { Component } from 'react';\n\nexport default class PushUpInput extends Component{\n    state={\n        whatToShow:0 //whatToShow: 0 renders inputs, 1 renders results upon completion \n    }\n\n    content={}\n    //content alternates between rendering inputs and session results\n    changeContent=(x)=>{\n        this.setState({whatToShow:x})\n    }\n\n    // formula to calculate total number of pullups per session\n    getTotal=()=>{\n        let total= Number(this.state.one)\n        +Number(this.state.two)\n        +Number(this.state.three);\n        this.setState({total})\n    }\n\n    render(){\n        var date = new Date();\n        var newDate= (date.getMonth() + 1) + '/' + date.getDate() + '/' + date.getFullYear();\n        \n        if(this.state.whatToShow === 0){\n        this.content=\n            <form onSubmit={(e)=>{\n                e.preventDefault();\n                // conditionals to validate inputs, empty string to prevent deleted inputs from validating\n                if(!isNaN(this.state.one) && this.state.one !== '' &&\n                    !isNaN(this.state.two)&& this.state.two !== '' &&\n                    !isNaN(this.state.three)&& this.state.three !== ''){\n                    let newSet={\n                        method:\"POST\",\n                        headers: {\"Content-Type\": \"application/json\"},\n                        body: JSON.stringify({\n                            date:newDate,\n                            one:this.state.one,\n                            two:this.state.two,\n                            three:this.state.three,\n                            total:this.state.total\n                        })\n                    }\n                    //post sends current session data to database and sets state to render, \n                    //submit button calculates total, second .then renders results\n                fetch(\"https://armstrongserver.herokuapp.com/pushup\", newSet).then((res)=>{\n                    return res.json();\n                }).then(this.changeContent(1))\n                }}}>\n                Set One<input className=\"inputMarg\" type=\"number\" min=\"0\" onChange={(e)=>{\n                    this.setState({one:e.target.value})\n                }}/><br/>\n                Set Two<input className=\"inputMarg\" type=\"number\" min=\"0\" onChange={(e)=>{\n                    this.setState({two:e.target.value})\n                }}/><br/>\n                Set Three<input className=\"inputMarg\" type=\"number\" min=\"0\" onChange={(e)=>{\n                    this.setState({three:e.target.value})\n                }}/><br/>\n                <button className=\"homeButton\" type='submit' onClick={()=>{    \n                    this.getTotal();\n                }}>Complete Set</button>\n            </form>\n        }else if(this.state.whatToShow === 1){\n            this.content = \n                <p>This Session: \n                    One: {this.state.one}, \n                    Two: {this.state.two}, \n                    Three: {this.state.three}, \n                    Total: {this.state.total}\n                </p>\n                \n        }\n            \n        return(\n            <div>{this.content}</div>\n        )\n    }\n}\n\n","import React, { Component } from 'react';\nimport PushUpSets from './PushUpSets';\nimport PushUpInput from './PushUpInput';\n\n\nexport default class PushUp extends Component{\n    state={\n        date:[],\n        one:[],\n        two:[],\n        three:[],\n        total:[],\n    }\n\n    componentDidMount(){\n        let dateArr=[];\n        let oneArr=[];\n        let twoArr=[];\n        let threeArr=[];\n        let totalArr=[];\n        fetch(\"https://armstrongserver.herokuapp.com/pushup\")\n            .then(r=>r.json())\n            .then(d=>{\n                d.reverse().map(t=>{\n                    dateArr.push(t.date)\n                    oneArr.push(t.one)\n                    twoArr.push(t.two)\n                    threeArr.push(t.three)\n                    totalArr.push(t.total)\n                })\n                this.setState({\n                    date:dateArr,\n                    one:oneArr,\n                    two:twoArr,\n                    three:threeArr,\n                    total:totalArr\n                })\n            })\n    }\n\n    render(){\n        return(\n            <div className=\"App\">\n                <button className=\"homeButton\" onClick={()=>{this.props.changeView(0)}}>Return to Home</button>\n                <h1>EVERY DAY!</h1>\n                <h3>3 max effort sets</h3>\n                <h3>Push Ups should be done when you start your day</h3>\n                <h3>Each set should be separated by at least 10 minutes</h3>\n                <PushUpInput/>\n                <PushUpSets\n                    date={this.state.date} \n                    one={this.state.one} \n                    two={this.state.two} \n                    three={this.state.three} \n                    total={this.state.total}\n                />\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Home from './Home'\nimport PullUp from './PullUp'\nimport PushUp from './workouts/pushup/PushUp'\n// import Stats from './stats/index'\n\n\nclass App extends Component {\n  state={\n    whatToDisplay: 0,\n  }\n// controls view between home >> pushup vs pullup\n  changeView = (view)=>{\n    this.setState({whatToDisplay:view})\n  }\n\n  render() {\n    let whatToRender = null;\n    if(this.state.whatToDisplay === 0){\n      whatToRender = <Home changeView={this.changeView}/>\n    }\n    else if(this.state.whatToDisplay === 1){\n      whatToRender = <PullUp changeView={this.changeView}/>\n    }\n    else if(this.state.whatToDisplay === 2){\n      whatToRender = <PushUp changeView={this.changeView}/>\n    }\n    // else if(this.state.whatToDisplay === 3){\n    //   whatToRender = <Stats changeView={this.changeView}/>\n    // }\n    return (\n      <div className=\"App\">\n        {whatToRender}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}